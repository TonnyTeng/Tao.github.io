<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tao的博客</title>
  <icon>https://www.gravatar.com/avatar/0ec302a3316b44d288c6f37788db9f6e</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tao1010.github.io/"/>
  <updated>2018-07-24T03:54:45.400Z</updated>
  <id>http://tao1010.github.io/</id>
  
  <author>
    <name>Tao</name>
    <email>dengtao_dev@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HBuilder混合开发问题总结</title>
    <link href="http://tao1010.github.io/2018/07/24/%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/HBuilder/HBuilder%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://tao1010.github.io/2018/07/24/混合开发/HBuilder/HBuilder混合开发问题总结/</id>
    <published>2018-07-24T01:12:53.000Z</published>
    <updated>2018-07-24T03:54:45.400Z</updated>
    
    <content type="html"><![CDATA[<p>1.将ttf格式文件的图片添加底部TabBar</p><a id="more"></a><p><img src="q1.png" alt="q1"></p><p>参考资料：<br>1.<a href=""></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.将ttf格式文件的图片添加底部TabBar&lt;/p&gt;
    
    </summary>
    
      <category term="HBuilder" scheme="http://tao1010.github.io/categories/HBuilder/"/>
    
    
      <category term="hbuilde问题" scheme="http://tao1010.github.io/tags/hbuilde%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>测试工具JMeter</title>
    <link href="http://tao1010.github.io/2018/07/21/%E5%85%B6%E4%BB%96/%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7JMeter/"/>
    <id>http://tao1010.github.io/2018/07/21/其他/测试工具JMeter/</id>
    <published>2018-07-20T19:33:00.000Z</published>
    <updated>2018-07-20T19:53:04.666Z</updated>
    
    <content type="html"><![CDATA[<p>一、JMeter作用</p><a id="more"></a><pre><code>1.可对软件做压力测试；2.可用于测试静态和动态资源(静态文件、Java小服务程序、CGI脚本、Java对象、数据库、FTP服务器等)；3.可用于对服务器、网络或对象模拟巨大的负载，来自不同压力类别下测试它们的强度和分析整体性能；4.可对应用程序做功能/回归测试</code></pre><p>2.Mac安装            </p><pre><code>1.官网下载JMeter包;        2.解压下载的apache-jmeter-4.0.tar;3.使用命令终端：    cd apache-jmeter-4.0/bin #进入bin目录    sh jmeter #启动桌面工具  - 弹出JMeter软件操作界面4.关闭JMeter 界面即可</code></pre><p>参考资料：<br>1.<a href="http://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="noopener">官网下载JMeter4.0</a><br>2.<a href="http://www.51testing.com/zhuanti/jmeter.html" target="_blank" rel="noopener">JMeter的使用 - 51Testing</a><br>3.<a href="http://www.cnblogs.com/0201zcr/p/5046193.html" target="_blank" rel="noopener">JMeter的使用 - Web</a><br>4.<a href="http://www.cnblogs.com/0201zcr/p/5089620.html" target="_blank" rel="noopener">JMeter的使用</a><br>5.<a href="https://baike.baidu.com/item/回归测试/1925732" target="_blank" rel="noopener">回归测试</a><br>6.<a href="https://baike.baidu.com/item/Jmeter/3104456?fr=aladdin" target="_blank" rel="noopener">JMeter介绍</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、JMeter作用&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://tao1010.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="测试" scheme="http://tao1010.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Mac获取ipa</title>
    <link href="http://tao1010.github.io/2018/07/21/%E5%85%B6%E4%BB%96/Mac%E8%8E%B7%E5%8F%96ipa/"/>
    <id>http://tao1010.github.io/2018/07/21/其他/Mac获取ipa/</id>
    <published>2018-07-20T16:49:19.000Z</published>
    <updated>2018-07-20T17:33:02.104Z</updated>
    
    <content type="html"><![CDATA[<p>1.工具准备</p><a id="more"></a><pre><code>Apple Configurator 2   Mac appstore下载即可登录appleId</code></pre><p>2.步骤</p><pre><code>1.在Appstore下载相关App（以xx宝为例）到iPhone或iPad上;2.打开 Apple Configurator 23.选中连接Mac的移动设备后，点击 Apple Configurator 2 工具菜单 ”添加“ --&gt; 应用；4.搜索app-xx宝，选中，点击右下角添加，等待添加完成(如下图)；5.不要操作  Apple Configurator 2,切换到桌面;6.快捷键：command + shift + G 或者在Finder 中前往文件夹...7.输入路径：~/Library/Group Containers/K36BKF7T3D.group.com.apple.configurator/Library/Caches/Assets/TemporaryItems/MobileApps/8.拷贝出 上述路径中的ipa文件，之后在 Apple Configurator 2 工具的弹框中点击停止，即可；</code></pre><p><img src="zhifubao.png" alt="zhifubao"><br><img src="done.png" alt="done"><br>3.获取资源</p><pre><code>1.修改上述获取的ipa文件，修改后缀名 ipa --&gt;zip;2.解压zip文件，在完成的文件夹中打开Payload 文件夹，即可看到应用xx宝应用程序；3.选中该应用程序，右键显示包内容即可查看图片资源等；</code></pre><p>4.获取图片资源</p><pre><code>1.找到包内容中的 Assets.car 文件；2.打开 “Assets提取工具”，导入 Assets.car 文件，添加到处文件夹，点击提取即可获取；</code></pre><p>参考资料:<br>1.<a href="https://www.jianshu.com/p/fdb50d303ad6" target="_blank" rel="noopener">Mac获取ipa和相关资源</a><br>2.<a href="https://github.com/pcjbird/AssetsExtractor" target="_blank" rel="noopener">Assets提取工具</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.工具准备&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://tao1010.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="ipa" scheme="http://tao1010.github.io/tags/ipa/"/>
    
  </entry>
  
  <entry>
    <title>HBuilder入门-环境</title>
    <link href="http://tao1010.github.io/2018/07/16/%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/HBuilder/HBuilder%E5%85%A5%E9%97%A8-%E7%8E%AF%E5%A2%83/"/>
    <id>http://tao1010.github.io/2018/07/16/混合开发/HBuilder/HBuilder入门-环境/</id>
    <published>2018-07-16T07:42:44.000Z</published>
    <updated>2018-07-20T13:25:54.466Z</updated>
    
    <content type="html"><![CDATA[<p>一、HBuilder</p><a id="more"></a><p>1.概念</p><pre><code>主要用于开发html、js、css，同时配合HTML的后端脚本语言如php、jsp也可以适用，还有前端的预编译语言如less以及markdown都可以良好的编辑.HBuilder是基于eclipse 3.7 开发的，不兼容eclipse4.x版本的插件</code></pre><p>2.快捷方式</p><pre><code>连续单词的首字母; dg--&gt;document.get整段HTML一般使用tag的名称; sc/st--&gt;script/style同一个tag，有多个代码块输出，则在最后加后缀;    meta    metau如果原始语法超过4个字符，针对常用语法，则第一个单词的激活符使用缩写;    inbu--&gt; input buttonjs的关键字代码块，是在关键字最后加一个重复字母;    iff    --&gt; if(){}    forr --&gt; for(){}    funn --&gt; function代码块    funa --&gt; 函数    func --&gt; 闭包</code></pre><p>3.JSDoc</p><pre><code>作用：导出API文档，明确代码类型，辅助代码提示；标签    @alias  给变量和函数指定别名    @constructor 标识函数是构造函数    @description 代码提示时的描述    @example     提示代码示例    @extends    标识继承于某个类型    @param    描述参数和参数类型    @property    描述对象的属性</code></pre><p>4.扩展语法提示、自定义语法</p><pre><code>JS部分：    1.基于sdocml的框架与法库        选中工程，点击右键，引入框架语法；        常用框架语法库，包括jquery、zepto、mui等    2.jsdoc    3.js代码块HTML部分：    标签和属性</code></pre><p>5.引入JQ等扩展框架语法库</p><pre><code>强烈不推荐使用：jquery mobile是非常卡顿的；在手机端的ui框架，推荐使用mui。</code></pre><p>6.插件</p><pre><code>HBuilder的工具→插件安装中已经集成了svn、git、php等常用的插件；</code></pre><p>二、HTML5 plus 和 Native.js<br>1.HTML5+</p><pre><code>是HBuilder对原生组件的封装，主要展示HBuilder中对各类组件的用法(方法、对象、属性、权限等)</code></pre><p>2.Native.js</p><pre><code>封装一条通道(通过JS语法直接调用Native API    Android -- JAVA    iOS -- Objective CAndroid调用方法：plus.androidiOS调用方法：plus.ios</code></pre><p>3.Native.js - iOS<br>方法</p><p>对象</p><p>权限</p><p>三、5+App(Html 5 Plus app)<br>1.概念</p><pre><code>HTML5 Plus 移动app的简称5+App。mobile web项目在浏览器运行appmobile web 打包成 app</code></pre><p>2.语言</p><pre><code>HTML、JS、CSS</code></pre><p>3.打包</p><pre><code>本地打包云打包证书：    android：使用DCloud生成的公用证书或自己生成的证书，两者不影响安装包的发布，唯一的差别就是证书中开发者和企业信息不同。</code></pre><p>三、wap2app<br>1.概念</p><pre><code>将移动站点，快速发布成App的增强方案；</code></pre><p>四、流应用</p><p>参考资料:<br>1.<a href="http://ask.dcloud.net.cn/article/88" target="_blank" rel="noopener">5+ App开发Native.js入门指南</a><br>2.<a href="http://www.dcloud.io/" target="_blank" rel="noopener">HBuilder架构</a><br>3.<a href="http://ask.dcloud.net.cn/article/91" target="_blank" rel="noopener">HBuilder中的UI-mui</a><br>  <a href="http://www.dcloud.io/hellomui/" target="_blank" rel="noopener">MUI</a><br>4.<a href="http://www.html5plus.org/doc/h5p.html" target="_blank" rel="noopener">HTML5+规范</a><br>5.<a href="http://ask.dcloud.net.cn/docs/#//ask.dcloud.net.cn/article/104" target="_blank" rel="noopener">HTML5+ SDK</a><br>6.<a href="http://dev.dcloud.net.cn/mui/" target="_blank" rel="noopener">HBuilder-MUI</a><br>7.<a href="https://blog.csdn.net/u014466109/article/details/71311028" target="_blank" rel="noopener">mui.init 和 plusready的区别</a><br>8.<a href="http://www.html5plus.org/doc/zh_cn/ios.html#plus.ios.importClass" target="_blank" rel="noopener">Native.js - iOS</a><br><a href="http://ask.dcloud.net.cn/article/114" target="_blank" rel="noopener">Native.js - iOS/Android</a>      </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、HBuilder&lt;/p&gt;
    
    </summary>
    
      <category term="HBuilder" scheme="http://tao1010.github.io/categories/HBuilder/"/>
    
    
      <category term="HBuilder基础" scheme="http://tao1010.github.io/tags/HBuilder%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Android-android环境配置</title>
    <link href="http://tao1010.github.io/2018/07/15/Android/Android-android%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://tao1010.github.io/2018/07/15/Android/Android-android环境配置/</id>
    <published>2018-07-15T02:37:42.000Z</published>
    <updated>2018-07-15T13:46:27.341Z</updated>
    
    <content type="html"><![CDATA[<p>一、卸载Mac上的Java</p><a id="more"></a><p>1.终端卸载</p><pre><code>必须以 root 用户身份或者使用 sudo 工具来执行删除命令.查看路径下是否存在下列文件    /Library/Internet Plug-Ins/JavaAppletPlugin.plugin    /Library/PreferencesPanes/JavaControlPanel.prefPane    ~/Library/Application Support/Java存在，执行:    sudo rm -fr /Library/Internet\ Plug-Ins/JavaAppletPlugin.plugin    sudo rm -fr /Library/PreferencesPanes/JavaControlPanel.prefPane    sudo rm -fr ~/Library/Application\ Support/Java完成上述步骤后，搜索：     /Library/Java/JavaVirtualMachines删除对应Java文件即可</code></pre><p>参考资料:<br>1.<a href="https://blog.csdn.net/haozhugogo/article/details/54809545" target="_blank" rel="noopener">卸载Mac上的Java</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、卸载Mac上的Java&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://tao1010.github.io/categories/Android/"/>
    
    
      <category term="android环境" scheme="http://tao1010.github.io/tags/android%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>Python-python基础-模块和文件</title>
    <link href="http://tao1010.github.io/2018/07/11/Python/Python%E5%9F%BA%E7%A1%80/Python-python%E5%9F%BA%E7%A1%80-%E6%A8%A1%E5%9D%97%E5%92%8C%E6%96%87%E4%BB%B6/"/>
    <id>http://tao1010.github.io/2018/07/11/Python/Python基础/Python-python基础-模块和文件/</id>
    <published>2018-07-11T01:30:02.000Z</published>
    <updated>2018-07-13T10:28:11.145Z</updated>
    
    <content type="html"><![CDATA[<p>一、异常</p><a id="more"></a><p>1.异常概念</p><pre><code>程序运行时，遇到错误，会停止程序的执行，并提示一些错误信息(抛出异常)</code></pre><p>2.处理异常 - 捕获异常</p><pre><code>通过 异常捕获 针对突发事件做集中处理，保障程序的稳定和健壮。错误类型: python解释器 抛出异常 时,最后一行错误信息的第一个单词就是错误类型。语法1:    try:        # 尝试执行的代码    except:        # 出现错误的处理语法2:    try:        # 尝试执行的代码    except 错误类型1:        # 针对错误类型1,对应的代码处理    except (错误类型2,错误类型3):        # 针对错误类型2和3,对应的代码处理    except Exception as result:        print(&quot;未知错误 %s&quot; % result)语法3:    try:        # 尝试执行的代码    except 错误类型1:        # 针对错误类型1,对应的代码处理    except (错误类型2,错误类型3):        # 针对错误类型2和3,对应的代码处理    except Exception as result:        print(&quot;未知错误 %s&quot; % result)    else:        # 没有异常才会执行的代码    finally:        # 无论是否有异常，都会执行的代码</code></pre><p>3.异常的传递</p><pre><code>当函数或方法 执行出现异常，会将异常传递给函数或方法的调用一方;如果传递到主程序,仍然没有异常处理，程序才会被终止在开发中，只需在主函数中增加 异常捕获即可</code></pre><p>4.抛出raise异常</p><pre><code>主动抛出异常场景:    登录模块时输入的密码不合法时，可主动抛出异常python 提供了一个 Exception 异常类步骤：    1.创建一个Exception 的对象；    2.使用 raise 关键字 抛出异常对象；</code></pre><p>5.eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 异常</span></span><br><span class="line"><span class="comment"># 当用户输入非数字时,程序抛出异常</span></span><br><span class="line">num = input(<span class="string">"请输入整数:"</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"输入的整数为:%d"</span> % int(num))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"输入的不是整数"</span>)</span><br><span class="line">print(<span class="string">"-"</span>*<span class="number">50</span>)</span><br><span class="line"><span class="comment"># eg2</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    res = <span class="number">8</span> / int(input(<span class="string">"请输入整数:"</span>))</span><br><span class="line">    print(res)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"除 0 错误"</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">"请输入正确的整数"</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    print(<span class="string">"未知错误 %s"</span> % result)</span><br><span class="line">print(<span class="string">"-"</span> * <span class="number">50</span>)</span><br><span class="line"><span class="comment"># eg3: - 主动抛出异常</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_password</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 1.提示用户输入密码</span></span><br><span class="line">    pwd = input(<span class="string">"请输入密码:"</span>)</span><br><span class="line">    <span class="comment"># 2.判断密码长度 &gt;= 8,返回用户输入的密码</span></span><br><span class="line">    <span class="keyword">if</span> len(pwd) &gt;= <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">return</span>  pwd</span><br><span class="line">    <span class="comment"># 3.密码长度 &lt; 8 主动抛出异常</span></span><br><span class="line">    <span class="comment"># 1&gt; 创建异常对象 - 可以使用错误信息字符串作为参数</span></span><br><span class="line">    exce = Exception(<span class="string">"密码长度不够"</span>)</span><br><span class="line">    <span class="comment"># 2&gt; 主动抛出异常</span></span><br><span class="line">    <span class="keyword">raise</span> exce</span><br><span class="line">    print(<span class="string">"主动抛出异常"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示用户输入密码</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(input_password())</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>二、模块 - 扩展<br>1.模块的概念</p><pre><code>模块：每一个以扩展名py结尾的Python源代码文件；模块名 是一个标志符，需要符合命名规则；在模块中定义 全局变量、函数、类 都是提供给外界直接使用的工具；模块就好比工具包，要使用必须 导入 这个模块；</code></pre><p>2.模块导入</p><pre><code>方法一：    import 模块名1,模块名2方法二： 推荐    import 模块名1    import 模块名2使用工具:    模块名.工具名(全局变量/函数/类)模块别名：符合大驼峰命名法    import 模块名1 as 模块别名</code></pre><p>3.导入部分工具</p><pre><code>form ... import#从 模块 导入 某一工具form 模块名1 import 工具名使用工具时，不需要指定模块名，直接调用模块提供的工具(全局变量/函数/类)即可如果两个模块，存在同名的函数，后导入的模块函数会覆盖先导入的函数import 代码 应该统一写在代码顶部，发现冲突可以使用 as 关键字 给其中 一个工具起别名eg:    from hm_01_测试模块1 import say_hello as module1_say_hello    from hm_02_测试模块2 import say_hello</code></pre><p>4.导入所有工具 - 不推荐(函数重名不好处理)</p><pre><code>#从 模块 导入 所有工具from ... import *</code></pre><p>5.模块搜索顺序</p><pre><code>导入模块时，python解释器搜索顺序：    搜索 当前目录 指定模块名的文件，    如果有直接导入；    没有，再搜索 系统目录给文件起名时，不要和 系统模块文件 重名查看模块的完整路径：__file__ 内置属性    print(__file__)    print(random.__file__)</code></pre><p>6.导入文件时，文件中 所有没有任何缩进的代码 都会被执行</p><pre><code>__name__属性：    测试模块的代码在 测试情况下被执行，被导入时不会被执行# 如果直接执行 显示结果为:__main__print(__name__)# 导入模块时，测试代码不会被执行if __name__ == &quot;__main__&quot;:    print(__name__)    </code></pre><p>常见Python文件中的代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="comment"># 定义全局变量</span></span><br><span class="line"><span class="comment"># 定义类</span></span><br><span class="line"><span class="comment"># 定义函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在代码的最下方</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="comment">#根据 __name__判断是否执行下方代码</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>7.包 - Package</p><pre><code>包 是一个 包含多个模块 的特殊目录；目录下有一个 特殊的文件 __init__.py包名的命名方式和变量名一致： 小写字母+_外界使用包模块，需要在__init__.py中指定 对外界提供的模块列表# 从 当前目录 导入 模块列表eg:    &quot;&quot;&quot;    message（文件夹）        send_message.py            #定义方法 send        receive_message.py            #定义方法 receive        __init__.py    导入包.py    &quot;&quot;&quot;    # __init__.py    from . import send_message    from . import receive_message    #导入包.py    import message    hm_message.hm_send_message.send(&quot;Hello&quot;)</code></pre><p>8.发布模块<br><img src="release.png" alt="release"><br>步骤:</p><pre><code>1.创建 setup.py - 固定格式    from  distutils.core import setup    setup(name=&quot;message&quot;,#包名          version=&quot;1.0&quot;,#版本          description=&quot;发送接收消息模块&quot;,#描述          long_description=&quot;&quot;,#详细描述          author=&quot;tao&quot;,#作者          author_email=&quot;deng_dev@163.com&quot;,#作者邮箱          url=&quot;www.python.com&quot;,#主页          py_modules=[&quot;receive&quot;,&quot;send&quot;]#包文件)2.构建模块     python3 setup.py build3.生成发布压缩包    python3 setup.py    sdist最后生成 dist/message-1.0.tar.gz 将这个包发个使用者即可</code></pre><p>要制作哪个版本(python2.x或python3.x),就要哪个版本解释器执行<br>9.安装和卸载模块:</p><pre><code># 安装模块cd xxx # 收到模块的路径位置tar -zxvf message-1.0.tar.gz #解压缩 生成 message-1.0的文件夹(setup.py、PKG-INFO)cd xxx #包含setup.py文件的路径位置sudo python3 setup.py install# 删除导入的模块cd xxx # 安装的模块位置路径sudo rm -r 模块名*</code></pre><p>10.第三方模块的管理</p><pre><code>第三方模块 通常指由知名第三方团队 开发的 被广泛使用的 Python包/模块    pygame # 游戏开发模块pip 是通用的python 包管理工具(查找、下载、安装、卸载)#安装/卸载 模块 到 Python2.x 环境sudo pip install pygamesudo pip uninstall pygame#安装/卸载 模块 到Python3.x 环境sudo pip3 install pygamesudo pip3 uninstall pygameMac下安装iPythonsudo pip install ipythonLinux下安装iPythonsudo apt install ipythonsudo apt install ipython3</code></pre><p>三、文件<br>1.文件存储</p><pre><code>文件是以 二进制 的方式 保存在磁盘上的文本文件    可以用文本编辑器查看二进制文件    保存的内容不能直接阅读，需要专门软件打开的文件</code></pre><p>2.文件的基本操作</p><pre><code>步骤：(必须安装步骤执行)1.打开文件(文件区分大小写)             open    文件存在，返回文件操作对象    文件不存在，抛出异常2.读、写文件内容     read write    可以一次性 读入 并返回所有内容3.关闭文件             close    若忘记关闭文件，会造成系统资源消耗，会影响到后续对文件的访问    方法执行后，会把文件指针移动到文件的末尾read/write/close 需要通过文件对象 来调用</code></pre><p>3.eg</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">file = open(<span class="string">"file.md"</span>)</span><br><span class="line">print(file)</span><br><span class="line"></span><br><span class="line">text = file.read()</span><br><span class="line">print(text)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"-"</span>*<span class="number">50</span>)</span><br><span class="line"><span class="comment"># 文件指针 在文末尾，text1 无内容</span></span><br><span class="line">text1 = file.read()</span><br><span class="line">print(text1)</span><br><span class="line"></span><br><span class="line">file.close()</span><br><span class="line">```</span><br><span class="line"><span class="number">4.</span>文件指针</span><br><span class="line"></span><br><span class="line">标记从哪个位置开始读区数据；</span><br><span class="line">第一次打开文件时，通常 文件指针 会指向 文件的开始位置；</span><br><span class="line">当执行 read 方法后，默认 文件指针 会指向 文件的末尾位置；</span><br><span class="line"><span class="number">5.</span>文件打开方式</span><br><span class="line"></span><br><span class="line">默认 只读方式打开</span><br><span class="line">open(<span class="string">"文件名"</span>,“打开方式”)</span><br><span class="line"></span><br><span class="line">r默认只读 文件指针在文件的开头 没有文件抛出异常</span><br><span class="line">w只写 文件存在覆盖原有内容，不存在文件则创建新文件</span><br><span class="line">a 追加 文件存在时，文件指针在文末尾，文件不存在，创建新文件写入</span><br><span class="line">r+  读写 文件存在时文件指针在文件的开头， 没有文件抛出异常</span><br><span class="line">w+  读写 文件存在则覆盖原有内容，文件不存在新建文件</span><br><span class="line">a+  读写 文件存在时文件指针在文件文末尾，文件不存在新建文件写入</span><br><span class="line"></span><br><span class="line">频繁的移动文件指针，影响文件读写效率</span><br><span class="line"></span><br><span class="line">readline 方法一次性读取一行内容，方法执行完后，文件指针移动到下一行，准备再次读取</span><br><span class="line">```python</span><br><span class="line">print(<span class="string">"-"</span>*<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">file = open(<span class="string">"file.md"</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    text = file.readline()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> text:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment"># 读取 一行的末尾已经有一个'\n'</span></span><br><span class="line">    print(<span class="string">"%s"</span> % text,end=<span class="string">""</span>)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>6.文件复制<br>小文件复制</p><pre><code>一次性读取，一次性写入</code></pre><p>大文件复制</p><pre><code>逐行读区，逐行写入</code></pre><p>eg</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制文件</span></span><br><span class="line"><span class="comment"># """</span></span><br><span class="line"><span class="comment"># 1.打开文件</span></span><br><span class="line">file_read = open(<span class="string">"file.md"</span>)</span><br><span class="line">file_write = open(<span class="string">"file1.text"</span>,<span class="string">"w"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.读、写文件</span></span><br><span class="line"><span class="comment"># 小文件复制</span></span><br><span class="line"><span class="comment"># text = file_read.read()</span></span><br><span class="line"><span class="comment"># file_write.write(text)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#大文件复制</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="comment"># 读取一行内容</span></span><br><span class="line">    text = file_read.readline()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判读是否读取到内容</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> text:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    file_write.write(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.关闭文件</span></span><br><span class="line">file_read.close()</span><br><span class="line">file_write.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># """</span></span><br></pre></td></tr></table></figure><p>7.文件/目录的常用操作</p><pre><code>在Python中，导入os模块 即可执行文件/目录的 创建、重命名、删除、改变路径、查看目录内容文件操作    rename  os.rename(源文件名,目标文件名)    remove  os.remove(文件名)目录操作    listdir     目录列表        os.listdir(目录名)    mkdir         创建目录        os.mkdir(目录名)    rmdir         删除目录        os.rmdir(目录名)    getcwd     获取当前目录    os.getcwd()    chdir         修改工作目录    os.chdir(目标目录)    path.isdir     判断是否是文件    os.path.isdir(文件路径)文件/目录 都支持相对路径和绝对路径os - option system 操作系统</code></pre><p>8.编码格式</p><pre><code>ASCII编码 (American Standard Code for Information Interchange)     计算机 256 个字符    一个ACSCII在内存中占一个字节的空间UNICODE编码    UTF-8        计算机 使用 1-6个字节 表示一个UTF-8字符        大多数汉字 使用3个字节 表示Python2.x 默认ASCII编码Python3.x 默认UTF-8编码Python2.x 中    使用中文        在源文件的第一行 添加(推荐第一种)        # *-* coding:utf-8 *-*         或        # *_* coding:utf-8 *_*          或        # coding=utf8    遍历字符串中的字符        在字符串的“”前加上小写字母 u 即可        eg: hello = u&quot;hello世界&quot;</code></pre><p>四、eval函数</p><pre><code>eval()函数 将字符串 当成有效的表达式来求值，并返回结果    eval(&quot;1+1&quot;)             # 2    eval(&quot;&apos;*&apos; * 3&quot;)         # ***不要使用 eval() 函数直接转换input 的结果</code></pre><p>参考资料:<br>1.<a href="">黑马视频</a><br>2.<a href="https://www.w3cschool.cn/python/" target="_blank" rel="noopener">W3C-Python</a>    </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、异常&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://tao1010.github.io/categories/Python/"/>
    
    
      <category term="python基础" scheme="http://tao1010.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python-python进阶-属性和方法</title>
    <link href="http://tao1010.github.io/2018/07/10/Python/Python%E5%9F%BA%E7%A1%80/Python-python%E8%BF%9B%E9%98%B6-%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95/"/>
    <id>http://tao1010.github.io/2018/07/10/Python/Python基础/Python-python进阶-属性和方法/</id>
    <published>2018-07-10T01:40:35.000Z</published>
    <updated>2018-07-13T10:28:11.149Z</updated>
    
    <content type="html"><![CDATA[<p>一、私有属性和私有方法</p><a id="more"></a><p>1.使用场景</p><pre><code>对象的某些方法和属性，只希望对象内部使用,外部和子类都不能访问</code></pre><p>2.定义方法</p><pre><code>在属性名或方法名前 增加 两个下划线 __    self.__age = age #私有属性    def __getAge(self): #私有方法        pass在python中没有真正的私有    解释器对私有属性或方法的处理方式：在名称前加上 _类名 =&gt; _类名__名称    print(&quot;访问私有属性:%d&quot; % xiaomei._Women__age)    xiaomei._Women__secret2()子类对象     子类对象方法中，不能访问父类的私有属性或方法    可以通过 父类 的公有方法 间接访问私有属性或方法</code></pre><p>3.eg</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Women</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.common_age = <span class="number">18</span></span><br><span class="line">        <span class="comment">#定义私有属性</span></span><br><span class="line">        self.__age = <span class="number">18</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">secret1</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"[%s] 的虚拟年龄[%d] "</span>%(self.name,self.common_age))</span><br><span class="line">    <span class="comment"># 私有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__secret2</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"[%s] 的 真实年龄[%d]"</span> % (self.name, self.__age))</span><br><span class="line"></span><br><span class="line">xiaomei = Women(<span class="string">"小芳"</span>)</span><br><span class="line">print(<span class="string">"访问公有属性:%d"</span> % xiaomei.common_age)</span><br><span class="line">xiaomei.secret1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过以下方式访问私有属性或方法：</span></span><br><span class="line">print(<span class="string">"访问私有属性:%d"</span> % xiaomei._Women__age)</span><br><span class="line">xiaomei._Women__secret2() <span class="comment">#可以访问私有方法</span></span><br><span class="line">xiaomei.secret2()<span class="comment">#不能访问私有方法</span></span><br></pre></td></tr></table></figure><p>二、面向对象 - 继承            </p><pre><code>实现代码的复用，提高效率</code></pre><p>1.单继承</p><pre><code>子类拥有父类的所有方法和属性可重写父类方法    覆盖父类的方法；    对父类的方法进行扩展；    super().父类方法; # 在需要的位置执行父类方法    #python2.x 可以采用 父类名.方法(self) -- 不推荐传递性(子类可继承父类，可继承父类的父类)语法：    class 类名(父类名)    :        pass</code></pre><p>2.eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"吃..."</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drink</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"喝..."</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"睡..."</span>)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoTianQuan</span><span class="params">(Dog)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(self)</span>:</span></span><br><span class="line">print(<span class="string">"啸天犬可以飞..."</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dark</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"汪汪汪..."</span>)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">catch</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"抓老鼠..."</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"白天睡觉..."</span>)</span><br><span class="line"></span><br><span class="line">dog = Dog()</span><br><span class="line">dog.sleep()</span><br><span class="line">dog.dark()</span><br><span class="line"></span><br><span class="line">cat = Cat()</span><br><span class="line">cat.catch()</span><br><span class="line">cat.sleep()</span><br><span class="line"><span class="comment">#解析：</span></span><br><span class="line">Dog类是Animal类的子类，Animal类是Dog类的父类，Dog类是从 Animal类继承</span><br><span class="line">Dog类是Animal类的派生类，Animal类是Dog类的基类，Dog类是从 Animal类派生</span><br></pre></td></tr></table></figure><p>3.多继承</p><pre><code>子类 可以拥有多个父类，具有所有父类的属性和方法语法格式:    class 子类名(父类名1,父类名2,...):        pass注意事项:    如果父类之间 存在 同名的属性或方法， 应 避免 使用多继承MRO(method resolution order) 主要用于在多继承时判断方法、属性的路径调用顺序    eg:C(B,A)    在执行C对象方法时： C类中查找 --无—-&gt;B类中查找 --无—-&gt;A类中查找 --无—-&gt;object类(基类)中查找 --无—-&gt;程序报错兼容性问题(python2.x和python3.x)    在定义类时，没有父类时，建议统一使用继承object类    class A(object):        pass    在python3.x中没有使用object基类，会默认使用基类</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class A(object):</span><br><span class="line"></span><br><span class="line">    def testA(self):</span><br><span class="line">        print(&quot;A&quot;)</span><br><span class="line"></span><br><span class="line">class B(object):</span><br><span class="line">    def testB(self):</span><br><span class="line">        print(&quot;B&quot;)</span><br><span class="line"></span><br><span class="line">class C(A,B):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">c = C()</span><br><span class="line">c.testA()</span><br><span class="line">c.testB()</span><br></pre></td></tr></table></figure><p>三、面向对象 - 多态<br>1.概述</p><pre><code>定义:不同的子类对象调用相同的父类方法，产生不同的执行结果；作用:增加代码的灵活度；使用前提：继承、重写父类方法；</code></pre><p>2.eg</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">game</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"自己玩耍..."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoTianDog</span><span class="params">(Dog)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">game</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"去天上玩耍..."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">game_with_dog</span><span class="params">(self,dog)</span>:</span></span><br><span class="line">        print(<span class="string">"【%s】和 【%s】玩耍"</span> % (dog.name,self.name))</span><br><span class="line">        dog.game()</span><br><span class="line"></span><br><span class="line">xiaoming = Person(<span class="string">"小明"</span>)</span><br><span class="line">dog = Dog(<span class="string">"腊肠"</span>)</span><br><span class="line">dog1 = XiaoTianDog(<span class="string">"啸天犬"</span>)</span><br><span class="line">xiaoming.game_with_dog(dog1)</span><br></pre></td></tr></table></figure><p>四、类    </p><pre><code>类的实例:创建出来的对象实例化：创建对象的动作实例属性：对象的属性实例方法：对象的方法类是一个特殊的对象，类对象在内存中只有一份每个对象都有自己独立的内存空间，保存各自不同的属性多个对象的方法，在内存中只有一份，在调用方法时，需要把对象的引用传递到方法内部</code></pre><p>1.类属性</p><pre><code>给类对象中定义属性，用来记录与这个类相关的特征，不会用于记录具体对象的特征属性获取 存在一个向上查找机制</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tool</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 使用赋值语句，定义类属性，记录创建工具对象的总数</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="comment"># 针对类属性做一个计数+1</span></span><br><span class="line">        Tool.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">tool1 = Tool(<span class="string">"工具1"</span>)</span><br><span class="line">tool2 = Tool(<span class="string">"工具2"</span>)</span><br><span class="line">print(<span class="string">"创建工具的次数:%d"</span> % Tool.count)</span><br></pre></td></tr></table></figure><p>2.类方法</p><pre><code>针对类对象 定义的方法语法格式：    @classmethod    def 类方法名(cls):        pass类方法需要使用修饰器@classmethod ;类方法的第一个参数应该是cls通过 类名.调用类方法，不需要传递cls参数在方法内部：    通过cls. 访问类的属性    通过cls.调用其他的类方法</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tool</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 使用赋值语句，定义类属性，记录创建工具对象的总数</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="comment"># 针对类属性做一个计数+1</span></span><br><span class="line">        Tool.count += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 类方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">"这是一个类方法,工具数量:%s"</span>% cls.count)</span><br><span class="line"> </span><br><span class="line">tool = Tool(<span class="string">"工具"</span>)</span><br><span class="line">print(<span class="string">"创建工具的次数:%d"</span> % Tool.count)</span><br><span class="line">Tool.test()</span><br></pre></td></tr></table></figure><p>3.静态方法</p><pre><code>既不需要 访问实例属性或实例方法也不需要 访问类属性或类方法语法格式：@staticmethoddef 静态方法():    pass调用方式：类名.静态方法</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tool</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">use_tool</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"这是一个静态方法"</span>)</span><br><span class="line">        </span><br><span class="line">Tool.use_tool()</span><br></pre></td></tr></table></figure><p>4.类方法类属性案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 定义类属性</span></span><br><span class="line">    top_score = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义初始化方法和实例属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.player_name = name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义静态方法</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_help</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"显示游戏帮助信息..."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义类方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_top_score</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">"玩家最高分:%d"</span> % cls.top_score)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 定义实例方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_game</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"【%s】开始游戏..."</span> % self.player_name)</span><br><span class="line"></span><br><span class="line">Game.show_help()</span><br><span class="line">Game.show_top_score()</span><br><span class="line"></span><br><span class="line">game = Game(<span class="string">"油爆爆"</span>)</span><br><span class="line">game.start_game()</span><br></pre></td></tr></table></figure><p>五、单例      </p><pre><code>设计模式：针对某一特定问题的成熟的解决方案单例设计模式:     让类创建的对象，在系统中只有唯一的一个实例；    每一次执行 类名() 返回的对象，内存地址是相同的；</code></pre><p>1.<strong>new</strong>方法</p><pre><code>__new__是一个由object 基类提供的内置静态方法，作用:    在内存中为对象分配空间    返回对象的引用使用 类名() 创建对象时，    python解释器首先会调用__new__方法为对象分配空间    python解释器获得对象引用后，将引用作为第一个参数传递给 __init__方法(初始化方法)重写__new__方法:    return super().__new__(cls) #必须返回，否则解释器得不到分配了空间的对象引用，不会调用__init__初始化方法</code></pre><p>2.eg</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MusicPlayer</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义类属性</span></span><br><span class="line">    instance = <span class="keyword">None</span>   <span class="comment">#记录是否分配内存地址</span></span><br><span class="line">    init_flag = <span class="keyword">False</span> <span class="comment">#记录是否执行过初始化方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 判断类属性是否为空对象</span></span><br><span class="line">        <span class="keyword">if</span> cls.instance <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            print(<span class="string">"创建对象时，new方法会被自动调用，主要用于分配空间"</span>)</span><br><span class="line">            <span class="comment"># 必须返回 否则 __init___ 方法获取不到分配的内存空间地址</span></span><br><span class="line">            cls.instance = super().__new__(cls)</span><br><span class="line">        <span class="comment"># 返回类属性保存的对象引用</span></span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.init_flag <span class="keyword">is</span> <span class="keyword">False</span>:</span><br><span class="line">            print(<span class="string">"播放器初始化..."</span>)</span><br><span class="line">            self.init_flag = <span class="keyword">True</span></span><br><span class="line">            </span><br><span class="line"><span class="comment"># 验证单例模式的唯一性</span></span><br><span class="line">player = MusicPlayer()</span><br><span class="line">player1 = MusicPlayer()</span><br><span class="line">print(<span class="string">"第一个玩家内存地址:%s\n第二个玩家内存地址:%s"</span>%(player,player1))</span><br></pre></td></tr></table></figure><p>参考资料:<br>1.<a href="">黑马视频</a><br>2.<a href="https://www.w3cschool.cn/python/" target="_blank" rel="noopener">W3C-Python</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、私有属性和私有方法&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://tao1010.github.io/categories/Python/"/>
    
    
      <category term="python基础" scheme="http://tao1010.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python-python进阶-面向对象和封装</title>
    <link href="http://tao1010.github.io/2018/07/09/Python/Python%E5%9F%BA%E7%A1%80/Python-python%E8%BF%9B%E9%98%B6-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://tao1010.github.io/2018/07/09/Python/Python基础/Python-python进阶-面向对象/</id>
    <published>2018-07-09T02:07:53.000Z</published>
    <updated>2018-07-13T10:28:11.149Z</updated>
    
    <content type="html"><![CDATA[<p>1.面向过程和面向对象</p><a id="more"></a><pre><code>面向过程：    实现：        把完成某个需求的 所有步骤 从头到尾 逐步实现        根据需求，将某些 功能独立 的代码 封装 成一个一个的函数        完成代码，顺序调用 不同的函数    特点:        注重 过程和步骤，不注重 职责和分工        需求复杂，代码会很复杂        开发复杂项目 没有固定套路 难度很大    相对函数 面向过程没有返回值(函数能执行，可以返回结果)面向对象    三大特征：封装、继承、多态    实现：        完成某个需求，首先确定 职责 - 要做的事情        根据职责 确定不同的对象 在对象内部 封装不要的方法（多个）        完成代码 顺序地让 不同对象 调用不同的方法    特点：        注重 对象和职责 不同的对象承担不同的职责        适合应对复杂的需求变化 是专门应对复杂项目开发，提供固定套路        需要在面向过程的基础上，掌握面向对象的语法    相对函数 面向对象是更大的 封装 根据职责在一个对象中封装多个方法</code></pre><p>2.类和对象</p><pre><code>类:对一群具有相同特征或行为的事物的一个统称，是抽象的，不能直接使用，是一个模版，负责创建对象    特征 --&gt; 属性    行为 --&gt; 方法对象：由类创建出来的具体存在，可以直接使用    不同对象，属性可能各不相同先有 类 再有 对象，类只有一个，对象可以很多</code></pre><p>设计类的三个要素:</p><pre><code>类名 - 大驼峰命令法 eg:Person属性 - 类的特征方法 - 类的行为</code></pre><p>3.面向对象语法</p><pre><code>在Python中，变量、数据、函数都是对象定义类:(第一个参数必须是self，类名必须符合大驼峰命名法)    class 类名:        #self:哪一个对象调用的方法，self就是哪一个对象的引用        def 方法1(self,参数列表):            pass        def 方法2(self,参数列表):            pass创建对象:    对象变量 = 类名()    #解释器自动执行:        为对象在内存 分配空间--创建对象；        为对象属性 设置初始值 - 初始化方法(init)        __init__ 是对象的内置方法，专门定义一个类具有哪些属性的方法；创建属性:    方法一：不推荐 对创建的对象 采用赋值方法        对象变量.属性名 = 属性值        可以通过self. 访问对象的属性        可以通过self. 调用其他对象的方法    方法二：在类的内部封装属性初始化方法:    初始化方法(init) 为对象属性 设置初始值    __init__ 是对象的内置方法，专门定义一个类具有哪些属性的方法；    方法一:def __init__(self):                    print(&quot;初始化方法&quot;)                    self.name = &quot;Tom&quot;       方法二:def __init__(self,new_name):                   print(&quot;初始化方法&quot;)                    self.name = new_name         eg:    #创建类    class Cat:            def __init__(self):                print(&quot;初始化方法&quot;)                self.name = &quot;Tom&quot;            &quot;&quot;&quot;            def __init__(self,new_name):                self.name = new_name            &quot;&quot;&quot;        def eat(self):            print(&quot;cat like eat fish&quot;)            print(&quot;%s like eat fish&quot; % self.name)        def run(self):            print(&quot;cat like run&quot;)    #创建对象         tom = Cat()    &quot;&quot;&quot;    tom = Cat(&quot;Tom&quot;)    &quot;&quot;&quot;    #创建属性 - 不推荐        #弊端： 不能调换顺序(python 执行从上而下)，若放在方法后tom.eat()，找不到赋值语句    tom.name = &quot;Tom&quot; #结合self.name使用     tom.eat()    tom.run() </code></pre><p>4.对象内置方法</p><pre><code>__del__ #对象被从内存中销毁前 会被自动调用__str__ #返回对象的描述信息,print 函数输出使用 使用场景:    在开发中，希望使用print 输出对象变量时，能够打印自定义的内容 就可以利用__str__ 内置方法    必须返回字符串</code></pre><p>5.面向对象 - 封装     </p><pre><code>对象方法的实现细节 封装在类的内部把属性和方法封装在类中类与类之间保留2个空行一般那个类先被创建，就需要先构建该类定义属性，不确定设置的初始值时，可以设置为 None一个对象的属性 可以是其他类创建的对象</code></pre><p>6.身份运算符(is / is not)</p><pre><code>is / is not 用于比较两个对象的内存地址 是否一致 ==  用于判断 引用变量的值 是否相等Python中针对 None 比较时，建议使用 身份运算符 判断</code></pre><p>7.eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 跑步与体重案例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,weight)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.weight = weight</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我的名字是%s 体重: %.2f公斤"</span> % (self.name,self.weight)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span><span class="comment"># pyhton语句执行完 就会销毁 对应创建的对象</span></span><br><span class="line">        print(<span class="string">"%s 被销毁了"</span> % self.name)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.weight -= <span class="number">0.5</span></span><br><span class="line">        print(<span class="string">"%s 体重减轻了 0.5kg"</span> % self.name)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.weight += <span class="number">0.8</span></span><br><span class="line">        print(<span class="string">"%s 体重增加了 0.8kg"</span> % self.name)</span><br><span class="line"><span class="comment">#创建 小明 对象</span></span><br><span class="line">xiaoming = Person(<span class="string">"小明"</span>,<span class="number">75.0</span>)</span><br><span class="line">xiaoming.run()</span><br><span class="line">xiaoming.eat()</span><br><span class="line">print(xiaoming)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建 小美 对象</span></span><br><span class="line">xiaomei = Person(<span class="string">"小妹"</span>,<span class="number">45.3</span>)</span><br><span class="line">xiaomei.eat()</span><br><span class="line">xiaomei.run()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 摆放家具案例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HouseItem</span>:</span><span class="comment">#先定义</span></span><br><span class="line">    <span class="string">"""创建家具类</span></span><br><span class="line"><span class="string">     属性:</span></span><br><span class="line"><span class="string">        名称</span></span><br><span class="line"><span class="string">        占地面积</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,area)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.area = area</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"[%s] 占地 %.2f"</span> % (self.name,self.area)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"家具 %s 被销毁了"</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">House</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    创建房子类</span></span><br><span class="line"><span class="string">    属性：</span></span><br><span class="line"><span class="string">        户型</span></span><br><span class="line"><span class="string">        面积</span></span><br><span class="line"><span class="string">        剩余面积</span></span><br><span class="line"><span class="string">        家具名称列表</span></span><br><span class="line"><span class="string">    方法:</span></span><br><span class="line"><span class="string">        添加家具</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, house_type, area)</span>:</span></span><br><span class="line">        self.house_type = house_type</span><br><span class="line">        self.area = area</span><br><span class="line">        <span class="comment"># 剩余面积</span></span><br><span class="line">        self.free_area = area</span><br><span class="line">        <span class="comment"># 家具列表</span></span><br><span class="line">        self.item_list = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"户型:%s\n总面积:%.2f[剩余面积:%.2f]\n家具:%s"</span></span><br><span class="line">                % (self.house_type, self.area,</span><br><span class="line">                   self.free_area, self.item_list))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加家具</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_item</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        print(<span class="string">"添加 %s"</span> % item)</span><br><span class="line">        <span class="keyword">if</span> self.free_area &gt;= item.area:</span><br><span class="line">            self.free_area -= item.area</span><br><span class="line">            self.item_list.append(item.name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"剩余面积不足,无法添加 %s"</span> % item.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.创建家具</span></span><br><span class="line">bed = HouseItem(<span class="string">"席梦思"</span>,<span class="number">4.0</span>)</span><br><span class="line">chest = HouseItem(<span class="string">"衣柜"</span>,<span class="number">2.0</span>)</span><br><span class="line">table = HouseItem(<span class="string">"餐桌"</span>,<span class="number">1.5</span>)</span><br><span class="line">print(bed)</span><br><span class="line">print(chest)</span><br><span class="line">print(table)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.创建房子</span></span><br><span class="line">home = House(<span class="string">"两室一厅"</span>,<span class="number">80.0</span>)</span><br><span class="line"></span><br><span class="line">home.add_item(bed)</span><br><span class="line">print(home)</span><br><span class="line"></span><br><span class="line">home.add_item(chest)</span><br><span class="line">print(home)</span><br><span class="line"></span><br><span class="line">home.add_item(table)</span><br><span class="line">print(home)</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">```python</span><br><span class="line"><span class="comment"># 士兵突击案例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gun</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    创建枪类</span></span><br><span class="line"><span class="string">    属性：</span></span><br><span class="line"><span class="string">        枪的型号</span></span><br><span class="line"><span class="string">        子弹数量</span></span><br><span class="line"><span class="string">    方法：</span></span><br><span class="line"><span class="string">        装子弹方法 - 增加子弹</span></span><br><span class="line"><span class="string">        发射子弹</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,model)</span>:</span></span><br><span class="line">        self.model = model</span><br><span class="line">        self.bullet_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_bullet</span><span class="params">(self,count)</span>:</span></span><br><span class="line">        self.bullet_count += count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shoot</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.bullet_count &lt;= <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"[%s] 没有子弹了!"</span> % self.model)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 发射子弹</span></span><br><span class="line">        self.bullet_count -= <span class="number">1</span></span><br><span class="line">        print(<span class="string">"[%s] ......🔥剩余子弹:%s"</span>%(self.model,self.bullet_count))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Soldier</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    创建士兵类</span></span><br><span class="line"><span class="string">    属性：</span></span><br><span class="line"><span class="string">        name</span></span><br><span class="line"><span class="string">        gun</span></span><br><span class="line"><span class="string">    方法：</span></span><br><span class="line"><span class="string">        fire</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="comment"># 新兵没有枪</span></span><br><span class="line">        self.gun = <span class="keyword">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"[%s]的枪是[%s]"</span> % (self.name,self.gun)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fire</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 判断是否有枪</span></span><br><span class="line">        <span class="comment">#if self.gun == None:</span></span><br><span class="line">        <span class="keyword">if</span> self.gun <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            print(<span class="string">"[%s] 没有枪"</span>%self.name)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 检查子弹</span></span><br><span class="line">        <span class="keyword">if</span> self.gun.bullet_count &lt;= <span class="number">0</span>:</span><br><span class="line">            self.gun.add_bullet(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"别动..."</span>)</span><br><span class="line">        <span class="comment"># 发射</span></span><br><span class="line">        self.gun.shoot()</span><br><span class="line"><span class="comment"># 创建枪对象</span></span><br><span class="line">ak47 = Gun(<span class="string">"AK47"</span>)</span><br><span class="line"><span class="comment"># ak47.add_bullet(50)</span></span><br><span class="line"><span class="comment"># ak47.shoot()</span></span><br><span class="line"></span><br><span class="line">xusanduo = Soldier(<span class="string">"许三多"</span>)</span><br><span class="line">xusanduo.gun = ak47</span><br><span class="line">xusanduo.fire()</span><br><span class="line">print(xusanduo)</span><br></pre></td></tr></table></figure><p>参考资料:<br>1.<a href="">黑马视频</a><br>2.<a href="https://www.w3cschool.cn/python/" target="_blank" rel="noopener">W3C-Python</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.面向过程和面向对象&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://tao1010.github.io/categories/Python/"/>
    
    
      <category term="python基础" scheme="http://tao1010.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>iOS第三方库-SDWebImage总结</title>
    <link href="http://tao1010.github.io/2018/07/06/iOS/iOS%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/iOS%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-SDWebImage%E6%80%BB%E7%BB%93/"/>
    <id>http://tao1010.github.io/2018/07/06/iOS/iOS第三方库/iOS第三方库-SDWebImage总结/</id>
    <published>2018-07-06T01:10:21.000Z</published>
    <updated>2018-07-06T13:07:39.085Z</updated>
    
    <content type="html"><![CDATA[<p>一、SDWebImage怎么实现缓存的</p><a id="more"></a><p>1.过程</p><pre><code>分为：    内存缓存 - 利用SDWebImageCache类的NSCache属性    磁盘缓存 - 利用NSFileManager    操场缓存 - 利用runtime关联的字典属性下载前先查询缓存，没有就下载，下载后保存图片到缓存</code></pre><p>二、SDWebImage下载后的图片在什么时候用到解码<br></p><p>三、怎样安全地在主线程执行一个Block？</p><p>四、怎样区分SDWebImageDownloader和SDWebImageManager的工作？</p><p>参考资料:<br><br>1.<a href="https://www.jianshu.com/p/b0f071672ef8" target="_blank" rel="noopener">SDWebImage总结</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、SDWebImage怎么实现缓存的&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tao1010.github.io/categories/iOS/"/>
    
    
      <category term="iOS第三方库" scheme="http://tao1010.github.io/tags/iOS%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Pyhon-python基础-语法进阶</title>
    <link href="http://tao1010.github.io/2018/07/05/Python/Python%E5%9F%BA%E7%A1%80/Pyhon-python%E5%9F%BA%E7%A1%80-%E8%AF%AD%E6%B3%95%E8%BF%9B%E9%98%B6/"/>
    <id>http://tao1010.github.io/2018/07/05/Python/Python基础/Pyhon-python基础-语法进阶/</id>
    <published>2018-07-05T08:38:32.000Z</published>
    <updated>2018-07-09T12:08:58.740Z</updated>
    
    <content type="html"><![CDATA[<p>一、变量的引用</p><a id="more"></a><p>1.引用的概念</p><pre><code>变量和数据 都保存在内存中，分开存储的;    数据 保存在内存中的一个位置；    变量 中保存着数据在内存中的 地址；变量 中记录数据的地址 就叫引用；使用 id()函数 可以查看变量中保存数据所在的内存地址；在python中函数的参数传递以及返回值 都是靠引用传递,返回的值并不是数据而是引用(地址)</code></pre><p>2.如果变量已经被定义，当给一个变量赋值时，本质上修改了数据的引用(地址)</p><pre><code>变量不再 对之前的数据引用变量改为 对新赋值的数据引用</code></pre><p>二、可变和不可变<br><br>1.不可变</p><pre><code>内存中的数据不允许被修改；数字类型 int bool float complex long(2.x)字符串str元祖tuple</code></pre><p>2.可变</p><pre><code>内存中数据可以被修改；列表list字典dict    key 只能使用不可变类型数据(字符串、整数、元祖，不可使用字典和列表作为key)可变类型的数据变化(是通过方法来实现的)地址不会变化对可变类型的变量 赋值 地址会变化</code></pre><p>3.哈希(hash)<br>3.1.pyhton中内置一个名叫 hash(o)的函数</p><pre><code>接收一个  不可变的数据 作为参数；    若为可变参数(list、dict)程序报错返回结果是一个 整数；eg：    hash(&quot;hello&quot;)        hash(1)    hash((1,))</code></pre><p>3.2.哈希 是一种算法 </p><pre><code>作用：提取数据的特征码(类似于指纹);相同的内容得到 相同的结果不同的内容得到 不同的结果</code></pre><p>3.3.在python中，设置字典的键值对时，首先会对 key 进行hash 决定如何在内存中保存字典的数据，以便后续对字典的操作：增、删、改、查</p><pre><code>键值对 的key 必须是不可变类型数据键值对 的value 可以是任意类型数据</code></pre><p>三、局部变量和全局变量<br>1.使用范围</p><pre><code>局部变量:函数内部定义的变量，只能在函数内部使用；全局变量:函数外部定义的变量，所有函数 内部 都可使用这个变量；不推荐 全局变量；</code></pre><p>2.局部变量</p><pre><code>不能在 函数内部以外的地方 使用； 函数执行结束后，局部变量会被系统回收；生命周期：    被创建(函数执行后)--&gt;被系统回收(函数结束后)作用:临时存储函数内部使用的数据；不同函数内的局部变量可以相同；        </code></pre><p>3.全局变量</p><pre><code>在函数内部：    可以获取全部变量的数据；    不允许修改全局变量的值；    如果使用赋值语句，会在函数内部定义一个局部变量；全局变量:可变范围太大，程序不好维护在函数内部修改全局变量的值：    使用 关键字 gloabl 修饰即可    eg: global num          num = 100全局变量定义的位置:    模块中的所有全局变量 定义在所有函数上方，保证所有函数都能访问到命名:    建议 - 全局变量名 前缀 g_ 或 gl_</code></pre><p>4.代码结构示意图</p><pre><code>#！  shebangimport 模块全局变量函数定义执行代码</code></pre><p>四、函数参数和返回值<br>1.利用元祖返回多个值</p><pre><code>元祖包含多个数据，可以使用元祖一次返回多个值；如果返回类型是元祖，可以省略小括号eg:    return (temp,wetness)    return temp, wetness接收返回值：    g_temp,g_wet =  return temp,wetness</code></pre><p>2.交换两个数字 - 算法</p><pre><code>要求：    a = 6, b = 100 交换a,b两数字方法一：临时变量    c = b    b = a    a = c方法二：不使用其他变量    a = a + b    b = a - b    a = a - b方法三：python，元祖    a,b = b,a #把元祖的小括号省略了</code></pre><p>3.可变参数和不可变参数</p><pre><code>函数内部针对参数 使用赋值 不会修改外部的实参变量；无论可变或不可变 参数，只要针对参数使用赋值语句 会在 函数内部 修改 局部变量 的引用 不会影响到外部变量的引用</code></pre><p>4.使用方法修改参数        </p><pre><code>在 函数内部 使用方法 修改 可变参数 会改变 外部 实参eg：    def demo(num_list):        #方法修改参数内容        num_list.append(9)        print(num_list)    g_list = [1,2,3]    demo(g_list)    print(g_list)</code></pre><p>5.+=运算符 - 算法</p><pre><code>#列表变量 作 += 元算 不会相加再赋值的操作 实际为 extend 方法操作 因此会改变外部参数eg:    num_list = num_list + num_list  # 不会改变外部参数    num_list += num_list  # 本质操作为 num_list.extend(num_list) 会改变外部参数</code></pre><p>6.缺省参数</p><pre><code>缺省参数：    定义函数时，可以给 某个参数 指定一个 默认值，具有默认值的参数作用:    函数的缺省参数，将常见的值设置为参数的缺省值 简化函数的调用eg:    g_list = [6,3,9]    g_list.sort() #默认按照升序排序    g_list.sort(reverse=True) #降序排序    指定函数的缺省参数：    最常见方法 - 在参数后使用赋值语句    eg:        def get_info(name,gender=True):            gender_text = &quot;男生&quot;            if not gender:                gender_text = &quot;女生&quot;            print(&quot;%s 是 %s&quot; % (name,gender_text))定义位置：    必须保证 带有默认值的缺省参数 在参数列表的末尾多个缺省参数的函数：    def get_info(name,title=&quot;&quot;,gender=True):            pass    get_info(&quot;小明&quot;,title=&quot;hello&quot;,gender=False)</code></pre><p>7.多值参数</p><pre><code>使用场景：    需要 一个函数 能够处理的参数 个数 是不确定的，需要使用多值参数定义方式：    参数名前 增加一个 * 可以接收 元祖    参数名前 增加两个 ** 可以接收 字典一般多值参数的命名方式 习惯使用2个名字：    *args     存放 元祖 参数 前面放一个 * #args--arguments    **kwargs    存放 字典 参数 前面有两个 * #kwargs --keyword argumentseg:    def demo(num, *args, **kwargs):        print(num)        print(args)        print(kwargs)    demo(1,2,3,4,5,name=&quot;小明&quot;,age=18,gender=True)    输出:        1        (2,3,4,5)        {&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 18, &apos;gender&apos;: True}</code></pre><p>元祖和字典的拆包</p><pre><code>拆包 使用场景    将一个 元祖变量 传递给 args    将一个 字典变量 传递给 kwargs拆包 使用方式：    在 元祖变量 前 增加一个 *    在 字典变量 前 增加两个 **eg:    def demo(*args, **kwargs):            print(args)            print(kwargs)    gl_nums = (1,2,3)    gl_dic = {&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 18, &apos;gender&apos;: True}    demo(*gl_nums,**gl_dic)</code></pre><p>8.递归    </p><pre><code>定义：    一个函数内部自己调用自己特点：    函数内部代码 相同，针对参数不同，处理结果不同；    递归出口:当参数满足一个条件时，函数不再执行(否则出现死循环)eg:    def test_demo(num):        if num == 1:            return 1        temp = test_demo(num - 1)        return num + temp    print(&quot;%s&quot; % test_demo(10))</code></pre><p>参考资料:<br>1.<a href="">黑马视频</a><br>2.<a href="https://www.w3cschool.cn/python/" target="_blank" rel="noopener">W3C-Python</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、变量的引用&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://tao1010.github.io/categories/Python/"/>
    
    
      <category term="python基础" scheme="http://tao1010.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Pyhon-python基础-综合应用</title>
    <link href="http://tao1010.github.io/2018/07/05/Python/Python%E5%9F%BA%E7%A1%80/Pyhon-python%E5%9F%BA%E7%A1%80-%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/"/>
    <id>http://tao1010.github.io/2018/07/05/Python/Python基础/Pyhon-python基础-综合应用/</id>
    <published>2018-07-05T02:24:39.000Z</published>
    <updated>2018-07-05T15:07:41.094Z</updated>
    
    <content type="html"><![CDATA[<p>1.需求</p><a id="more"></a><pre><code>1.程序启动显示名片管理系统的欢迎界面，显示功能菜单    *****************************    欢迎使用【名片管理系统】V1.0    1.新建名片    2.显示全部    3.查询名片    0.退出系统    ******************************2.根据数字选择功能3.根据功能选择，执行不同的功能4.用户名片需要记录用户的姓名、电话、QQ、邮箱5.如果查询到指定名片，用户可以选择修改或者删除名片</code></pre><p>2.使用知识</p><pre><code>变量流程控制函数模块</code></pre><p>3.框架搭建</p><pre><code>1.准备文件 确定文件名， 保证在需要的位置编写代码2.编写框架代码 主运行循环 实现基本的用户输入和判断3.使用 pass 关键字 作为占位符 保证程序代码结构正确，不执行任何操作！4.无限循环 重复操作直到 break 退出循环</code></pre><p>4.模块分析</p><pre><code>card_main.py    import card_tools    import card_input    字符串判断    pass    无限循环    TODO注释 格式: # TODO(作者/邮件) 需要做的事card_tools.py    定义 显示 欢迎界面 函数    定义 增、删、查、显示 函数card_input.py    #优化之前完成的功能    定义输入函数</code></pre><p>5.数据结构分析</p><pre><code>使用 字典 记录 每张名片的详细信息；    dic = {        &quot;name&quot;:&quot;&quot;,        &quot;phone&quot;:&quot;&quot;,        &quot;qq&quot;:&quot;&quot;,        &quot;email&quot;:&quot;&quot;    }使用 列表 统一记录所有名片字典；    card_list = []所有名片相关的操作，都需要使用这个列表，所以应该 定义在程序的顶部；最初都是空数据；</code></pre><p>6.函数分析</p><pre><code>新增名片：    1.提示用户输入名片详细信息    2.使用用户输入的信息 建立一个名片字典    3.将名片字典添加到列表中    4.提示用户添加成功显示所有名片：    1.打印表头    2.打印分割线    3.打印名片信息查询名片：    1.提示用户搜索姓名    2.遍历名片列表，查询搜姓名，并作相关提示或显示修改名片：    1.判断是否修改         #字符串是否为空         eg1：if not name:        eg2: if len(name) &gt; 0:    2.创建存储字典    3.替换列表中的对应元素    4.提示删除名片：    直接删除(remove等)</code></pre><p>7.运行程序</p><pre><code>启动python程序方法一: 终端    pyhton3 xx.py方法二: 脚本中加入 #！    #！ 读 shebang    位置：        #! 通常在Unix系统脚本中的第一行开头使用：    作用：        指明执行这个脚本文件的解释程序；    步骤：        1.使用which查询python解释器所做路径            which python        2.修改要运行的主 python 文件(xxx.py) 在第一行增加(必须添加在第一行)            #! /usr/bin/python #解释器路径        3.修改主 python文件 的文件权限 增加执行权限            ls -lh #查看权限信息            chmod +x xxx.py        4.执行程序（终端）            ./xxx.py</code></pre><p>8.源码<br><br>car_main.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /Library/Frameworks/Python.framework/Versions/3.6/bin/python3</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">程序入口</span></span><br><span class="line"><span class="string">每一次启动程序，均通过次文件</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> card_tools</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"></span><br><span class="line">    card_tools.show_menu()</span><br><span class="line"></span><br><span class="line">    action = input(<span class="string">"请选择操作功能:"</span>)</span><br><span class="line">    <span class="keyword">if</span> action <span class="keyword">in</span> [<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>]:</span><br><span class="line">        <span class="comment"># 新增名片</span></span><br><span class="line">        <span class="keyword">if</span> action == <span class="string">"1"</span>:</span><br><span class="line">            <span class="comment"># TODO(小明) 新建名片</span></span><br><span class="line">            card_tools.add_card()</span><br><span class="line">        <span class="comment"># 显示全部</span></span><br><span class="line">        <span class="keyword">elif</span> action == <span class="string">"2"</span>:</span><br><span class="line">            <span class="comment"># TODO(小王) 显示全部</span></span><br><span class="line">            card_tools.show_all()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 查询名片</span></span><br><span class="line">            <span class="comment"># TODO(小李) 查询名片</span></span><br><span class="line">            card_tools.query_card()</span><br><span class="line">    <span class="comment"># 退出系统</span></span><br><span class="line">    <span class="keyword">elif</span> action == <span class="string">"0"</span>:</span><br><span class="line">        <span class="comment"># print("您选择的操作是【退出系统】")</span></span><br><span class="line">        print(<span class="string">"欢迎再次使用【名片管理系统】"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 操作异常</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"您的操作有误,请选择:【1.新增名片】【2.显示全部】【3.查询名片】【0.退出系统】"</span>)</span><br></pre></td></tr></table></figure><p>card_tools.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">对名片进行 增、删、改、查</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">fun_count = <span class="number">30</span></span><br><span class="line">fun_str = <span class="string">"*"</span></span><br><span class="line">fun_sub_str = <span class="string">"-"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录所有的名片字典</span></span><br><span class="line">card_list = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_menu</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""显示菜单"""</span></span><br><span class="line">    card_name = <span class="string">"名片管理系统"</span></span><br><span class="line">    card_v = <span class="string">"V1.0"</span></span><br><span class="line">    card_new = <span class="string">"1.新建名片"</span></span><br><span class="line">    card_show_all = <span class="string">"2.显示全部"</span></span><br><span class="line">    card_query = <span class="string">"3.查询名片"</span></span><br><span class="line">    card_quit = <span class="string">"0.退出系统"</span></span><br><span class="line"></span><br><span class="line">    print(fun_str * fun_count)</span><br><span class="line">    print(<span class="string">"欢迎使用【%s】%s"</span> % (card_name, card_v))</span><br><span class="line">    print(<span class="string">""</span>)</span><br><span class="line">    print(card_new)</span><br><span class="line">    print(card_show_all)</span><br><span class="line">    print(card_query)</span><br><span class="line">    print(<span class="string">""</span>)</span><br><span class="line">    print(card_quit)</span><br><span class="line">    print(fun_str * fun_count)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_card</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""新增名片"""</span></span><br><span class="line">    print(fun_sub_str * fun_count)</span><br><span class="line">    print(<span class="string">"【新增名片】"</span>)</span><br><span class="line">    <span class="comment"># 1.提示用户输入名片详细信息</span></span><br><span class="line">    name = input(<span class="string">"请输入姓名:"</span>)</span><br><span class="line">    phone = input(<span class="string">"请输入电话:"</span>)</span><br><span class="line">    qq = input(<span class="string">"请输入QQ号码:"</span>)</span><br><span class="line">    email = input(<span class="string">"请输入邮箱:"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.使用用户输入的信息 建立一个名片字典</span></span><br><span class="line">    card_dic = &#123;<span class="string">"name"</span>:name,</span><br><span class="line">                <span class="string">"phone"</span>:phone,</span><br><span class="line">                <span class="string">"qq"</span>:qq,</span><br><span class="line">                <span class="string">"email"</span>:email&#125;</span><br><span class="line">    <span class="comment"># 3.将名片字典添加到列表中</span></span><br><span class="line">    card_list.append(card_dic)</span><br><span class="line">    <span class="comment"># 4.提示用户添加成功</span></span><br><span class="line">    print(<span class="string">"添加 %s 的名片成功!"</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_all</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""显示所有名片"""</span></span><br><span class="line">    print(fun_sub_str * fun_count)</span><br><span class="line">    print(<span class="string">"【显示全部】"</span>)</span><br><span class="line">    <span class="keyword">if</span> len(card_list) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 1.打印表头</span></span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> [<span class="string">"姓名"</span>, <span class="string">"电话"</span>, <span class="string">"QQ"</span>, <span class="string">"邮箱"</span>]:</span><br><span class="line">            print(name, end=<span class="string">"\t\t"</span>)</span><br><span class="line">        print(<span class="string">""</span>)</span><br><span class="line">        <span class="comment"># 2.打印分割线</span></span><br><span class="line">        print(<span class="string">"="</span> * fun_count)</span><br><span class="line">        <span class="keyword">for</span> dict <span class="keyword">in</span> card_list:</span><br><span class="line">            print(<span class="string">"%s\t\t%s\t\t%s\t\t%s"</span> % (dict[<span class="string">"name"</span>],dict[<span class="string">"phone"</span>],dict[<span class="string">"qq"</span>],dict[<span class="string">"email"</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"没有名片记录，请使用添加功能新增名片!"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_card</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""查询名片"""</span></span><br><span class="line">    print(fun_sub_str * fun_count)</span><br><span class="line">    print(<span class="string">"【查询名片】"</span>)</span><br><span class="line">    <span class="keyword">if</span> len(card_list) &gt; <span class="number">0</span>:</span><br><span class="line">        query_name = input(<span class="string">"请输入要查询的姓名:"</span>)</span><br><span class="line">        <span class="keyword">for</span> card_dic <span class="keyword">in</span> card_list:</span><br><span class="line">            <span class="keyword">if</span> card_dic[<span class="string">"name"</span>] == query_name:</span><br><span class="line">                print(<span class="string">"姓名\t\t电话\t\tQQ\t\t邮箱"</span>)</span><br><span class="line">                print(<span class="string">"="</span> * fun_count)</span><br><span class="line">                print(<span class="string">"%s\t\t%s\t\t%s\t\t%s"</span> % (card_dic[<span class="string">"name"</span>], card_dic[<span class="string">"phone"</span>], card_dic[<span class="string">"qq"</span>], card_dic[<span class="string">"email"</span>]))</span><br><span class="line">                print(<span class="string">"="</span> * fun_count)</span><br><span class="line">                editCard(card_dic)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"抱歉,没有找到 %s 名片"</span> % query_name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"没有名片信息!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">editCard</span><span class="params">(dic)</span>:</span></span><br><span class="line">    <span class="string">"""修改|删除|返回上一级名片"""</span></span><br><span class="line">    action = input(<span class="string">"请选择要执行的操作(【1.修改】【2.删除】【0.返回上一级菜单】):"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> action == <span class="string">"1"</span>:</span><br><span class="line">        print(<span class="string">"【修改名片】"</span>)</span><br><span class="line">        <span class="comment"># 1.提示用户输入名片详细信息</span></span><br><span class="line">        <span class="comment"># 2.替换列表中的名片</span></span><br><span class="line">        dic[<span class="string">"name"</span>] = input_card_info(dic[<span class="string">"name"</span>],<span class="string">"请输入姓名:(回车不修改)"</span>)</span><br><span class="line">        dic[<span class="string">"phone"</span>] = input_card_info(dic[<span class="string">"phone"</span>], <span class="string">"请输入电话:(回车不修改)"</span>)</span><br><span class="line">        dic[<span class="string">"qq"</span>] = input_card_info(dic[<span class="string">"qq"</span>], <span class="string">"请输入QQ号码:(回车不修改)"</span>)</span><br><span class="line">        dic[<span class="string">"email"</span>] = input_card_info(dic[<span class="string">"email"</span>], <span class="string">"请输入邮箱:(回车不修改)"</span>)</span><br><span class="line">        <span class="comment"># 3.提示用户添加成功</span></span><br><span class="line">        print(<span class="string">"修改 %s 的名片成功!"</span> % dic[<span class="string">"name"</span>])</span><br><span class="line">        <span class="comment"># show_menu()</span></span><br><span class="line">    <span class="keyword">elif</span> action == <span class="string">"2"</span>:</span><br><span class="line">        print(<span class="string">"【删除名片】"</span>)</span><br><span class="line">        card_list.remove(dic)</span><br><span class="line">        print(<span class="string">"删除成功!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># show_menu()</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_card_info</span><span class="params">(old_str,place_holder)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param old_str: 字典中原有值</span></span><br><span class="line"><span class="string">    :param place_holder: 输入占位符</span></span><br><span class="line"><span class="string">    :return: 如果用户输入了内容则返回输入内容，否则返回原有值</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 1.提示用户输入内容</span></span><br><span class="line">    new_str = input(place_holder)</span><br><span class="line">    <span class="comment"># 2.针对用户输入进行判断，如果用户输入了内容，直接返回结果</span></span><br><span class="line">    <span class="keyword">if</span> len(new_str) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span>  old_str</span><br><span class="line">    <span class="comment"># 3.如果用户没有输入内容，返回 字典中原有的值</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> new_str</span><br></pre></td></tr></table></figure><p>参考资料:<br><br>1.<a href="">黑马视频</a><br><br>2.<a href="https://www.w3cschool.cn/python/" target="_blank" rel="noopener">W3C-Python</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.需求&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://tao1010.github.io/categories/Python/"/>
    
    
      <category term="python基础" scheme="http://tao1010.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>iOS其他-编码和解码</title>
    <link href="http://tao1010.github.io/2018/07/04/iOS/iOS%E5%85%B6%E4%BB%96/iOS%E5%85%B6%E4%BB%96-%E7%BC%96%E7%A0%81%E5%92%8C%E8%A7%A3%E7%A0%81/"/>
    <id>http://tao1010.github.io/2018/07/04/iOS/iOS其他/iOS其他-编码和解码/</id>
    <published>2018-07-04T06:46:31.000Z</published>
    <updated>2018-07-04T12:05:50.927Z</updated>
    
    <content type="html"><![CDATA[<p>1.OC中对中文编码</p><a id="more"></a><pre><code>NSString *city = @&quot;成都&quot;;//正确编码为: %e6%88%90%e9%83%bd最新方法：方法一：    NSString *charactersToEscape = @&quot;?!@#$^&amp;%*+,:;=&apos;\&quot;`&lt;&gt;()[]{}/\\| &quot;;    NSCharacterSet *allowedCharacters = [[NSCharacterSet characterSetWithCharactersInString:charactersToEscape] invertedSet];方法二：    NSCharacterSet *allowedCharacters = [NSCharacterSet URLQueryAllowedCharacterSet]NSString *city_encode = [city stringByAddingPercentEncodingWithAllowedCharacters:allowedCharacters];已废弃方法：    NSString *city_encode = [city stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];</code></pre><p>对中文、特殊符号 &amp; % 和空格 都必须转译才能正确访问，一般需要转译的字符:@”<font color="red">?!@#$^&amp;%*+,:;=’\”`&lt;&gt;()[]{}/\| </font>“<br>2.Unicode和汉字互转</p><pre><code>iOS9-//unicode转中文NSString* strA = [@&quot;%E4%B8%AD%E5%9B%BD&quot;stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];//中文转unicodeNSString *strB = [@&quot;中国&quot;stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];ios9+//中文转unicodeurlStr = [@&quot;url地址&quot; stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLQueryAllowedCharacterSet]];//unicode转中文urlStr = [@&quot;url地址&quot; stringByRemovingPercentEncoding];</code></pre><p>3.区别stringByAdding… 和stringByReplacing…</p><pre><code>...Adding...    将Unicode字符转换成有百分号的形式;    对中文和一些特殊字符进行编码;...Adding...    将百分号形式转换成Unicode形式</code></pre><p>参考资料:<br><br>1.<a href="http://tool.chinaz.com/tools/urlencode.aspx" target="_blank" rel="noopener">站长工具 - URL编码</a><br><br>2.<a href="https://blog.csdn.net/u011774517/article/details/51295103" target="_blank" rel="noopener">stringByAdding… 和stringByReplacing…</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.OC中对中文编码&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tao1010.github.io/categories/iOS/"/>
    
    
      <category term="iOS其他" scheme="http://tao1010.github.io/tags/iOS%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>iOS第三方库-AFNetworking</title>
    <link href="http://tao1010.github.io/2018/07/04/iOS/iOS%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/iOS%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-AFNetworking/"/>
    <id>http://tao1010.github.io/2018/07/04/iOS/iOS第三方库/iOS第三方库-AFNetworking/</id>
    <published>2018-07-04T05:34:44.000Z</published>
    <updated>2018-07-04T12:05:50.927Z</updated>
    
    <content type="html"><![CDATA[<p>1.版本信息</p><pre><code>v3.2.0</code></pre><a id="more"></a><p>2.结构</p><pre><code>AFNetworking.hNSURLSession    AFURLSessionManager    AFHTTPSessionManagerReachability - 网络状态监测Security - 安全策略(证书和公钥)    AFSecurityPolicySerializationSupport FilesUIKit</code></pre><p>参考资料：<br><br>1.<a href="https://www.jianshu.com/p/01055bb6943b" target="_blank" rel="noopener">AFNetworking - 源码探究</a><br><br>2.<a href="https://github.com/AFNetworking/AFNetworking" target="_blank" rel="noopener">AFNetworking - github</a><br><br>3.<a href="https://www.jianshu.com/p/9fbb9b8ed5fb" target="_blank" rel="noopener">AFNetworking - GET</a><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.版本信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;v3.2.0
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tao1010.github.io/categories/iOS/"/>
    
    
      <category term="iOS第三方库" scheme="http://tao1010.github.io/tags/iOS%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>iOS其他-CocoaPods-应用</title>
    <link href="http://tao1010.github.io/2018/07/02/iOS/iOS%E5%85%B6%E4%BB%96/iOS%E5%85%B6%E4%BB%96-CocoaPods-%E5%BA%94%E7%94%A8/"/>
    <id>http://tao1010.github.io/2018/07/02/iOS/iOS其他/iOS其他-CocoaPods-应用/</id>
    <published>2018-07-02T01:36:49.000Z</published>
    <updated>2018-07-02T12:22:04.137Z</updated>
    
    <content type="html"><![CDATA[<p>CocoaPods是ruby写的，用于管理Xcode开发时第三方开源的工具。</p><pre><code>Mac自带Ruby环境</code></pre><p>一、环境配置</p><a id="more"></a><p>1.Ruby软件源的处理</p><pre><code>查看Ruby版本：    ruby -v验证Ruby源：    gem source -l结果：    *** CURRENT SOURCES ***    https://ruby.taobao.org  #只要存在淘宝的源就可以安装    https://gems.ruby-china.org添加Ruby源:    gem sources -a https://ruby.taobao.org删除Ruby源:    gem sources --remove https://ruby.taobao.org #删除淘宝ruby软件源    gem sources --remove https://gems.ruby-china.org #删除China 社区ruby软件源更新Ruby:    sudo gem update --system</code></pre><p>2.安装CocoaPods到电脑</p><pre><code>方法一:推荐    sudo gem install -n /usr/local/bin cocoapods 方法二:可能报错    sudo gem install cocoapods 如果安装多个Xcode:    sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer</code></pre><p>3.下载配置到本地</p><pre><code>pod setup #设置仓库，把所有上传到cocoapods的第三方框架下载每个版本和网络地址以及一些其他描述信息到本地</code></pre><p>二、CocoaPods的使用<br><br>1.查找第三方</p><pre><code>pod search xxxeg:    pod search AFNetworking</code></pre><p>2.创建Podfile文件</p><pre><code>cd  xxx/xxx #切换到项目文件夹下方法一:    touch Podfile #新建文件Podfile方法二：    pod init #会自动配置 Podfile文件内容，编辑时只需添加第三方即可</code></pre><p>3.编辑Podfile文件</p><pre><code>方法一：    vim Podfile    #进入编辑界面    i               #开始编辑    键盘 ‘esc’      #退出编辑    ：wq               #写入完成保持并退出编辑界面方法二：    open Podfile    #会用文本编辑器打开</code></pre><p>4.Podfile文件内容</p><pre><code>写法1：        target &apos;MyApp&apos; do   #针对MyApp项目导入依赖库           pod &apos;xxx&apos;,&apos;~&gt;1.0&apos;   end 写法2:     # 下面两行是指明依赖库的来源地址    source &apos;https://github.com/CocoaPods/Specs.git&apos;    source &apos;https://github.com/Artsy/Specs.git&apos;    # 说明平台是ios，版本是9.0    platform :ios, &apos;9.0&apos;    # 忽略引入库的所有警告（强迫症者的福音啊）    inhibit_all_warnings!    # 针对MyApp target引入AFNetworking    # 针对MyAppTests target引入OCMock，    target &apos;MyApp&apos; do         pod &apos;AFNetworking&apos;, &apos;~&gt; 3.0&apos;         target &apos;MyAppTests&apos; do           inherit! :search_paths            pod &apos;OCMock&apos;, &apos;~&gt; 2.0.1&apos;         end    end</code></pre><p>5.安装CocoaPods到项目</p><pre><code>pod install</code></pre><p>三、其他<br><br>1.Podfile中的依赖项</p><pre><code>pod 指定特定的依赖库podspec 可以提供一个API来创建podspecstarget 通过target指定依赖范围source 指定pod来源 默认使用CocoaPods官方Source，建议默认</code></pre><p>2.依赖库版本问题</p><pre><code>#指定依赖库具体版本格式：pod &apos;AFNetworking&apos;, &apos;3.0&apos; #不指定依赖库版本，默认选取最新版本:pod &apos;AFNetworking&apos;#指定版本范围pod &apos;AFNetworking&apos;, &apos;&gt; 3.0&apos; #高于3.0的任意一个版本pod &apos;AFNetworking&apos;, &apos;&lt;=3.0&apos; #低于(包含)3.0的任意一个版本pod &apos;AFNetworking&apos;, &apos;～&gt;3.1.2&apos; #版本3.1.2 到 版本3.2(不包含)之间的任意一个版本</code></pre><p>3.use_frameworks!</p><pre><code>use_frameworks使用的区别:    使用 use_frameworks! 命令会在Pods工程下生成Frameworks目录下生成依赖库的framework    不使用 use_frameworks! 命令会在Pods工程下的Products目录下生成.a 的静态库</code></pre><p>推荐使用 use_frameworks！纯OC项目一般不使用 swift必须使用 use_frameworks! </p><table><thead><tr><th></th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>静态库(静态链接库 .a)</td><td>在编译时会将库copy一份到目标程序中，编译完成之后，目标程序不依赖外部的库，也可以运行</td><td>会使应用程序变大</td></tr><tr><td>动态库(.dylib)</td><td>编译时只存储了指向动态库的引用;可以多个程序指向这个库，在运行时才加载，不会使体积变大</td><td>运行时加载会损耗部分性能，并且依赖外部的环境，如果库不存在或者版本不正确则无法运行</td></tr><tr><td>Framework</td><td>实际上是一种打包方式，将库的二进制文件，头文件和有关的资源文件打包到一起，方便管理和分发</td><td>暂无</td></tr></tbody></table><p>4.pod install 和 pod update区别</p><pre><code>pod install 下载并安装Pod    当podfile 文件中 有 “增、删、改 pod”的操作后使用；    pod install 执行完后将会下载依赖库的版本号添加到podfile.lock文件；    pod install 根据podfile.lock文件列出的已安装的pod版本信息，只负责下载安装podfile.lock中不存在的pod，不会自动更新已安装的pod版本；pod update 更新已存在Pod    按规则将podfile文件中的pod更新到最新版本，并将pod版本信息写入podfile.lock;        </code></pre><p>四、错误<br><br>1.While executing gem …</p><pre><code>复现:    执行命令 sudo gem install cocoapods 报错  处理:    sudo gem install -n /usr/local/bin cocoapods</code></pre><p>参考资料:<br><br>1.<a href="https://www.jianshu.com/p/8a0fd6150159" target="_blank" rel="noopener">Podfile配置</a><br><br>2.<a href="https://blog.csdn.net/cwf19860527/article/details/54139214" target="_blank" rel="noopener">pod install 和 pod update区别</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CocoaPods是ruby写的，用于管理Xcode开发时第三方开源的工具。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Mac自带Ruby环境
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一、环境配置&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tao1010.github.io/categories/iOS/"/>
    
    
      <category term="iOS其他" scheme="http://tao1010.github.io/tags/iOS%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Python-python基础-高级变量</title>
    <link href="http://tao1010.github.io/2018/06/29/Python/Python%E5%9F%BA%E7%A1%80/Python-python%E5%9F%BA%E7%A1%80-%E9%AB%98%E7%BA%A7%E5%8F%98%E9%87%8F/"/>
    <id>http://tao1010.github.io/2018/06/29/Python/Python基础/Python-python基础-高级变量/</id>
    <published>2018-06-29T07:19:03.000Z</published>
    <updated>2018-07-05T15:07:41.096Z</updated>
    
    <content type="html"><![CDATA[<p>非数字型 数据类型 的特点：</p><pre><code>都是一个序列，可以看成容器；取值 []遍历 for in计算长度、最大/最小值、比较、删除链接 + 和 重复 *切片</code></pre><p>一、列表 - List    </p><a id="more"></a><p>1.定义</p><pre><code>列表(List) 是Python中使用最频繁的数据类型，其他语言称为数组；专门用于存储一串信息,存储相同类型的数据；列表用 [] 定义，数据之间用 , 分隔；列表的 索引|下标  从 0 开始eg:    name_list = [&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;]</code></pre><p>2.列表常用方法<br><br><img src="list_method.png" alt="list_method">    </p><pre><code>xx.extend # 将列表A添加到列表B中时，A、B的数据类型必须一致del 列表名[下标] #关键字 del 本质上是用来将变量从内存中删除xx.remove[&apos;a&apos;] #删除一个存在的元素，如果有多个元素 a 则只删除第一次出现的aeg:    del name_list[1] #将name_list中下标为1的元素 “李四” 从内存中删除    name_list.count[&apos;a&apos;] #统计列表name_list中 ‘a’ 出现的次数 </code></pre><p>3.其他</p><pre><code>使用关键字 后不需要 ()    del name_list[1] #删除 name_list 列表下标为1的 数据 内存也删除使用函数、方法 都需要 ()        name_list.reverse() #反转    name_list.append[&apos;Jack&apos;] #在列表name_list 最后加上 ‘Jack’ 数据函数和方法的区别：    方法和函数一样都是封装的独立的功能；    方法需要通过对象来调用，表示针对这个 对象 要做的操作：        对象.方法名(参数)</code></pre><p>4.循环遍历</p><pre><code>在Python中，为提高列表的遍历效率 专门提供 迭代iteration 遍历for循环迭代遍历格式eg:    for name in name_list:        print(name)</code></pre><p>二、元祖 - Tuple<br><br>1.定义</p><pre><code>和列表类似，区别：    可以保存不同类型的数据；    元祖的元素不能修改；    定义方式为:元祖名()；eg:    tuple = (&apos;张三&apos;, 18, 1.75)    print(&quot;姓名:%s \t 年龄:%d \t 身高:%.2f&quot; % (tuple[0],tuple[1],tuple[2]))</code></pre><p>2.注意</p><pre><code>元祖定义一个元素时，后面也必须加 ,eg：info_tuple = (50,)解析： 若不加 , python解释器会认会 info_tuple = (50) 这是一个变量名</code></pre><p>3.常用方法</p><pre><code>eg:tuple = (&apos;张三&apos;, 18, 1.75)取数据: tuple[1]取索引: tuple.index(&quot;张三&quot;)统计计数:    tuple.count(&quot;张三&quot;)包含元素个数: len(tuple)</code></pre><p>4.循环遍历</p><pre><code>#使用格式字符串频接 元祖 tuple 不方便,因为元祖中保存的数据类型不同for item in tulpe:    print(item)</code></pre><p>5，应用场景</p><pre><code>函数的参数和返回值，一个函数可以接受多个参数，或者一次返回多个数据；格式字符串    后面的()本质上是一个元祖；列表不可以被修改，以保护数据安全；</code></pre><p>5.元祖和列表的转换</p><pre><code>元祖--&gt;列表list(tuple) #可修改tuple数据列表--&gt;元祖tulpe（list）eg：    info_tuple = (&apos;张三&apos;, 18, 1.75)    num_list = [1,2,3,4]    #列表转元祖    num_tulpe = tuple(num_list)    print(num_tulpe)    #元祖转列表    info_list = list(info_tuple)    print(info_list)</code></pre><p>三、字典 - dictionary<br><br>1.定义</p><pre><code>字典用 {} 定义,可用来定义多个数据；    通常用于存储描述一个 对象 的相关信息使用 键值对 存储数据，键值对间使用 , 分隔;键和值间用 : 分隔;键必须唯一的同时只能使用字符串、数字、或元祖，值可以是任何数据类型；eg:    xiaoming = {&quot;name&quot;:&quot;小明&quot;,                  &quot;age&quot; :18,                  &quot;gender&quot;: True,                          &quot;height&quot;: 1.75}</code></pre><p>2.和列表的区别：</p><pre><code>字典：是 无序 对象的集合列表: 是 有序 对象的集合</code></pre><p>3.字典的方法</p><pre><code>获取所有 key 列表: 字典.keys()获取所有 value 列表: 字典.values()获取所有 (key,value)元祖 列表: 字典.items()获取键值对数量: len(字典)查：xiaoming[&quot;name&quot;] #key错误或不存在 程序报错增：xiaoming[&quot;weight&quot;] = 75 #key不存在 新增改：xiaoming[&quot;age&quot;] = 20    #key存在 修改删：xiaoming.pop(&quot;gender&quot;) #删除 指定key 的键值对,若key错误或不存在，程序报错合并字典:字典1.update(字典2)    被合并的字典包含已经存在的键值对，会覆盖原有的键值对    eg:        temp_dict = {&quot;weight&quot;:75}        xiaoming.update(temp_dict)清空字典:清空所有键值对    xiaoming.clear()</code></pre><p>4.循环遍历</p><pre><code>#变量k是每一次循环中，获取到的键值对的keyfor k in xiaoming:    print(&quot;字典中的键值对为 key: %s, value:%s&quot; % (k,xiaoming[k]))</code></pre><p>5.应用场景</p><pre><code>使用对歌键值对 ，存储描述一个物体的相关信息 - 描述更复杂的数据信息；将 多个字典 放在一个 列表 中，进行遍历，在循环体内部针对每个字典进行 相同的处理；</code></pre><p>四、字符串<br><br>1.字符串的定义</p><pre><code>可以一对 “”,也可用一对 ‘’,推荐 “ ”</code></pre><p>2.常用方法</p><pre><code>获取长度: len(字符串1)统计小字符串2 在 大字符串2 中出现的次数: 字符串1.count(字符串2)获取指定位置的字符: 字符串1[index]获取指定字符在字符串的位置: 字符串1.index(字符串2)    若 字符串2 不存在 程序报错循环遍历:    for char in 字符串1:        print(char)</code></pre><p>3.方法分类<br><br><img src="str-is.png" alt="判断类型"><br><br><img src="str-find.png" alt="文本查找和替换"><br><br><img src="str-change.png" alt="大小写转换"><br><br><img src="str-just.png" alt="文本对齐"><br><br><img src="str-strip.png" alt="去除空白字符"><br><br><img src="str-split.png" alt="拆分连接"><br></p><pre><code>判断类型 - 9查找和替换 - 7大小写转换 - 5文本对齐 - 3去除空白字符 - 3拆分和连接 - 5</code></pre><p>4.字符串切片</p><pre><code>切片：使用索引来限定范围，从一个大的字符串中切出小的 字符串格式:    字符串[开始索引:结束索引:步长]tips:    不包括结束索引的元素    顺序索引 0 1 2...    倒序索引(从右到左) -1 -2 -3 ... eg:     num = &apos;0123456789&apos;    print(num[2:6]) #2345    print(num[2:])  #23456789    print(num[:3])    #012    print(num[0:3])    #012    print(num[0::2]) #02468    print(num[2:-1]) #2345678    print(num[-1::-1]) #9876543210 倒序    print(num[::-1])      #9876543210 倒序</code></pre><p>五、公共方法<br><br>1.定义</p><pre><code>公共方法:列表、元祖、字典、字符串等共有的方法;</code></pre><p>2.Python常用函数</p><pre><code>len(item) #元素个数del(item)    #删除变量    a = [1,2,3,4]    del a[0]#删除列表中下标为0的元素    print(a)    del(a[0])#删除列表中下标为0的元素    print(a)    del(a) #删除a列表max(item) #返回容器中元素的最大值 如果是字典，比较key,返回keymin(item)    #返回容器中元素的最小值 如果是字典，比较key,返回key    t_dic = {&quot;a&quot;:&quot;1&quot;,&quot;b&quot;:&quot;2&quot;,&quot;c&quot;:&quot;3&quot;}    print(max(t_dic))    print(min(t_dic))cmp(item1,item2) #Python3.x取消的此函数 比较大小 -1 &lt; | 0 = | 1 &gt;    Python3.x中可以用比较运算符比较</code></pre><p>3.切片</p><pre><code>使用对象：字符串、元祖、列表    &quot;1234&quot;[1:3]         #字符串    [1,2,3,4][1:3]    #列表    (1,2,3,4)[1:3]    #元祖字典不能切片 - 键值对形式存在，没有索引</code></pre><p>4.运算符<br><br><img src="commonmethod.png" alt="commonmethod"></p><pre><code>t_list = [1,2,3,4]# .extend 方法会将括号内的列表元素分别插入列表中t_list.extend([8,9]) #[1,2,3,4,8,9]# .append方法会将括号内的对象作为一个元素插入t_list.append([8,9]) #[1,2,3,4,[8,9]]t_list.append(0)         #[1,2,3,4,0]in 和 not in 在判断字典时，判断的是字典的key成员运算符(in 和 not in) 用于测试序列中是否包含指定的成员 </code></pre><p>5.完整的for循环</p><pre><code>for 变量 in 集合:    ...else: #上面的for 循环集合中的每个元素都遍历了，就会执行else代码    没有通过break 退出循环，循环结束后，会执行的代码eg：    for num in [1,2,3,4]:        print(num)        if num == 2:            print(&quot;不执行else代码&quot;)            break;    else:        print(&quot;循环结束!&quot;)</code></pre><p>参考资料:<br><br>1.<a href="">黑马视频</a><br><br>2.<a href="https://www.w3cschool.cn/python/" target="_blank" rel="noopener">W3C-Python</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;非数字型 数据类型 的特点：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;都是一个序列，可以看成容器；
取值 []
遍历 for in
计算长度、最大/最小值、比较、删除
链接 + 和 重复 *
切片
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一、列表 - List    &lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://tao1010.github.io/categories/Python/"/>
    
    
      <category term="python基础" scheme="http://tao1010.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python-python基础-函数</title>
    <link href="http://tao1010.github.io/2018/06/29/Python/Python%E5%9F%BA%E7%A1%80/Python-python%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0/"/>
    <id>http://tao1010.github.io/2018/06/29/Python/Python基础/Python-python基础-函数/</id>
    <published>2018-06-29T05:16:07.000Z</published>
    <updated>2018-07-02T12:22:04.129Z</updated>
    
    <content type="html"><![CDATA[<p>一、函数的概念和作用</p><a id="more"></a><p>1.函数的概念</p><pre><code>把具有独立功能的代码块 组织成一个小的模块 在需要的时候调用</code></pre><p>2.函数的使用</p><pre><code>定义函数 -  封装 独立的功能调用函数</code></pre><p>3.函数的作用</p><pre><code>提高编码效率；解决代码重用；</code></pre><p>二、函数的使用<br><br>1.格式</p><pre><code>def 函数名():    函数封装的代码    ...解析:    def  define的缩写    函数名 见名知意，能表达函数的功能    函数名    名称规则：        字母、数字、下划线        不能一数字开头        不能和关键字重名</code></pre><p>2.使用步骤：<br><br>方法一：在不同文件定义、调用函数</p><pre><code>1.新建文件 hm_custom_function.py2.编写函数代码    #函数一： 九九表    def multiple_table():        print(&quot;==================九九乘法表==================&quot;)        row = 1        while row &lt;= 9:            col = 1            while col &lt;= row:                if col == row:                    print(&quot;%d * %d = %d&quot; % (col,row,(col * row)))                else:                    print(&quot;%d * %d = %d&quot; % (col, row, (col * row)),end=&quot;\t&quot;)                col += 1            row +=1        print(&quot;==================九九乘法表==================&quot;)    #函数二： say hello    def say_hello():        print(&quot;Hello Python&quot;)3.函数的使用    导入函数文件 - 在需要使用函数的文件中         import hm_custom_function    调用函数        hm_custom_function.multiple_table()        hm_custom_function.say_hello()</code></pre><p>方法二：在同一文件定义、调用函数</p><pre><code>必须 先定义 再调用 函数(Python的解释器必须要先知道函数的存在)#定义函数def say_hello():    &quot;&quot;&quot; 函数说明&quot;&quot;&quot;    print(&quot;Hello Python&quot;)#使用函数say_hello()</code></pre><p>3.函数的调试<br><br><img src="function.png" alt="function"></p><pre><code>单步进入 - step into单步越过 - step out</code></pre><p>4.函数文档说明</p><pre><code>在定义函数的下方输入：    &quot;&quot;&quot; 函数说明 &quot;&quot;&quot;eg:    def say_hello():        &quot;&quot;&quot; 函数说明&quot;&quot;&quot;        print(&quot;Hello Python!&quot;)</code></pre><p>三、函数的参数<br><br>1.函数参数的使用</p><pre><code>在函数名后的()内 写入参数多个参数之间 使用 , 分隔</code></pre><p>2.参数的作用</p><pre><code>增加函数的通用性，针对相同的数据处理逻辑，能够适应更多的数据形参    定义函数时，小括号内的参数    函数内部，可做变量使用实参    调用函数时，传递的参数</code></pre><p>3.eg:</p><pre><code>#hm_cumstom_function.pydef sum_2_num(num1,num2): #定义函数       &quot;&quot;&quot;实现两个数字的求和&quot;&quot;&quot;    print(&quot;%d + %d = %d&quot; % (num1,num2,(num2 + num1)))#hm_04_函数.pyimport hm_custom_function #导入自定义函数hm_custom_function.sum_2_num(10,20)    #函数调用</code></pre><p>四、函数的返回值<br>1.返回值    </p><pre><code>函数完成执行后，给调用者的一个结果；使用 关键字return 可以返回结果；使用 return 后，后续代码不会再执行；使用 变量 接受 返回值；</code></pre><p>五、函数的嵌套</p><p>1.tips</p><pre><code>函数的调用可以在定义之前</code></pre><p>2.eg:</p><pre><code>def test1():    print(&quot;test1&quot;)    test2()def test2():    print(&quot;*&quot; * 20)</code></pre><p>六、模块<br><br>1.模块概念</p><pre><code>模块是Python程序架构的核心概念类似工具包，想要使用工具包中工具，必须 import 这个模块    可以使用函数 模块名.函数    可以使用变量 模块名.变量每个以扩展名 .py 结尾的python 源代码文件 都是一个模块在模块中定义的 全局变量、 函数 都是模块能够给外界直接使用的工具</code></pre><p>2.模块名</p><pre><code>是一个标志符；命名规则：    字母、数字、下划线    不能以数字开头    不能以下划线开头        </code></pre><p>3.其他</p><pre><code>pyc文件可提高程序的执行速度pyc - 是xx.py 文件通过编译后生成的二进制文件xx.pyc若修改了 xx.py文件 编译时会重新生成 xx.pyc二进制文件</code></pre><p>参考资料:<br><br>1.<a href="">黑马视频</a><br><br>2.<a href="https://www.w3cschool.cn/python/" target="_blank" rel="noopener">W3C-Python</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、函数的概念和作用&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://tao1010.github.io/categories/Python/"/>
    
    
      <category term="python基础" scheme="http://tao1010.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>iOS其他-脚本自动打包</title>
    <link href="http://tao1010.github.io/2018/06/29/iOS/iOS%E5%85%B6%E4%BB%96/iOS%E5%85%B6%E4%BB%96-Python%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85/"/>
    <id>http://tao1010.github.io/2018/06/29/iOS/iOS其他/iOS其他-Python脚本自动打包/</id>
    <published>2018-06-29T01:17:57.000Z</published>
    <updated>2018-07-02T12:22:04.138Z</updated>
    
    <content type="html"><![CDATA[<p>脚本打包的使用场景：</p><pre><code>主要用于测试分发，正式发布建议使用手动打包(对脚本没有掌握情况下)；企业账号和其他账号使用的不同的脚本文件；自动打包的大小和手动打包的大小有区别(打包效率和包的优化上有所取舍)；</code></pre><p>一、Python脚本打包<br></p><a id="more"></a><p>1.缺点</p><pre><code>配置内容较多目前只支持 .xcodeproj 的工程,    不支持 .xcworkspace 的工程</code></pre><p>二、jenkins 脚本打包</p><p>三、shell脚本打包</p><p>参考资料:<br><br>一、Python脚本打包<br><br>1.<a href="https://mp.weixin.qq.com/s/5f2Pd8RHBN7TClZDZlx_Gw" target="_blank" rel="noopener">Python脚本-iOS自动打包</a><br><br>2.<a href="https://www.jianshu.com/p/1f47066da6f7" target="_blank" rel="noopener">Python脚本-iOS自动打包2</a><br><br>3.<a href="https://github.com/hades0918/ipapy" target="_blank" rel="noopener">Python 打包脚本</a><br><br>4.<a href="https://github.com/FIRHQ/fir-cli/blob/master/README.md" target="_blank" rel="noopener">蒲公英Fir分发平台</a><br><br>5.<a href="https://www.jianshu.com/p/1f47066da6f7" target="_blank" rel="noopener">Python自动打包</a><br>二、jenkins 脚本打包<br><br>1.<a href="https://www.jianshu.com/p/6a3a009da35b" target="_blank" rel="noopener">Jenkins集成iOS全自动打包</a><br></p><p>三、shell脚本打包<br><br>1.<a href="http://zackzheng.info/2015/12/27/2015-12-27-an-automated-script-for-building-archiving-submission-sending-emails/" target="_blank" rel="noopener">详解Shell脚本实现iOS自动化编译打包提交</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;脚本打包的使用场景：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;主要用于测试分发，正式发布建议使用手动打包(对脚本没有掌握情况下)；
企业账号和其他账号使用的不同的脚本文件；
自动打包的大小和手动打包的大小有区别(打包效率和包的优化上有所取舍)；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一、Python脚本打包&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tao1010.github.io/categories/iOS/"/>
    
    
      <category term="iOS其他" scheme="http://tao1010.github.io/tags/iOS%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Python-python基础-逻辑</title>
    <link href="http://tao1010.github.io/2018/06/28/Python/Python%E5%9F%BA%E7%A1%80/Python-python%E5%9F%BA%E7%A1%80-%E9%80%BB%E8%BE%91/"/>
    <id>http://tao1010.github.io/2018/06/28/Python/Python基础/Python-python基础-逻辑/</id>
    <published>2018-06-28T06:47:22.000Z</published>
    <updated>2018-07-02T12:22:04.131Z</updated>
    
    <content type="html"><![CDATA[<p>程序流程</p><pre><code>顺序 - 从上而下，顺序执行分支 - 根据条件判断，决定执行代码的分支循环 - 让 特点代码重复 执行</code></pre><p>一、分支语句</p><a id="more"></a><p>1.if语句</p><pre><code>格式：if 判断条件:    #if顶格写 注意添加冒号:    dosomething... # 一个tab键或4个空格eg1:    price = float(input(&quot;请输入苹果单价(元/斤):&quot;))    if price &gt; 5:        print(&quot;苹果价格太贵了,吃不起&quot;)        ...eg2:    price = float(input(&quot;请输入苹果单价(元/斤):&quot;))    if price &gt; 5:        print(&quot;苹果价格太贵了,吃不起&quot;)        ...    else:        print(&quot;价格可以接受&quot;)        ...eg3:    if 条件1:        dosomething1    elif 条件2:        dosomething2    else:        dosomething3解析：    只有 if语句时  if语句和下方缩进的部分 看成一个代码块 -- eg1    if和else语句 以及下方缩进的部分 看成一个完整的代码块 -- eg2    if、elif、else以及各自缩进的部分，看成一个完成的代码块 -- eg3</code></pre><p>2.运算符</p><pre><code>在Python中使用运算符(其他相同，仅如下有区别):    ==     #等于不同类型不能进行比较；</code></pre><p>3.逻辑运算</p><pre><code>Python中逻辑运算符：     and #与     or  #或     not #非逻辑运算符可以把多个条件按照逻辑连接起来，变成更复杂逻辑eg:    # 实例4    age = int(input(&quot;请输入0-120之间的年龄:&quot;))    if (age &gt; 0) and (age &lt; 120):        print(&quot;年龄正确&quot;)    else:        print(&quot;年龄错误!&quot;)    # 实例5    python_score = 80    c_score = 90    if python_score &gt; 60 or c_score &gt; 60:        print(&quot;考试通过&quot;)    else:        print(&quot;重考&quot;)    # 实例6    is_employee = True    if not is_employee:        print(&quot;不允许入内&quot;)    else:        print(&quot;请进&quot;)</code></pre><p>4.if嵌套</p><pre><code># 实例7-火车站安检has_ticket = bool(input(&quot;请输入是否买票1 - 买票 | 0 - 未买票:&quot;))if has_ticket:    print(&quot;有车票,开始安检...&quot;)    knife_length = float(input(&quot;请输入携带道具长度:&quot;))    if knife_length &lt;= 20:        print(&quot;安检通过&quot;)    else:        print(&quot;携带管制刀具,长度:%.2f,安检未通过!&quot; % knife_length)else:    print(&quot;请买票!&quot;)</code></pre><p>5.实例：石头剪刀布</p><pre><code>使用随机数：1.导入工具包    import random #导入随机数模块的工具包2.使用随机函数(输入 模块名称 后面输入 . 键盘 tab 可查看所有模块函数)    random.randint(a,b) #返回[a,b]之间的整数，包含a和b# 实例7 - 石头剪刀布&quot;&quot;&quot;    1.控制台输入 石头 - 1 | 剪刀 - 2 | 布 - 3    2.电脑 随机 出拳    3.比较胜负&quot;&quot;&quot;import randomperson = int(input(&quot;请出拳(石头 - 1 | 剪刀 - 2 | 布 - 3):&quot;))# computer = 1 # 假设电脑先出石头computer = random.randint(1,3)computer_str = &quot;石头&quot;if computer == 2:    computer_str = &quot;剪刀&quot;if computer == 3:    computer_str = &quot;布&quot;if (computer == 1 and person == 3) \        or (computer == 2 and person == 1) \        or (computer == 3 and person == 2): # 电脑先出石头    print(&quot;您赢了&quot;)elif computer == person:    print(&quot;平局!&quot;)else:    print(&quot;您输了!&quot;)print(&quot;电脑出拳: %s&quot; % computer_str)</code></pre><p>二、循环语句<br><br>1.while 循环</p><pre><code>语法格式：    while 条件(判断 计数器 是否达到目标次数):        条件满足时，dosomething1        条件满足时，dosomething2        条件满足时，dosomething3        ...        处理条件(计数器 + 1)eg:打印5次 “Hello Pyhton”    count = 0    while count &lt; 5:        print(&quot;Hello Pyhton&quot;)        count = count + 1 # &lt;==&gt; count += 1注意可能存在死循环(未修改条件)</code></pre><p>2.赋值运算符</p><pre><code>+= # 加法赋值 a += c &lt;==&gt; a = a + c-= # 减法赋值 a -= c &lt;==&gt; a = a - c*= # 乘法赋值 a *= c &lt;==&gt; a = a * c/= # 除法赋值 a /= c &lt;==&gt; a = a / c//= # 取整除赋值 a //= c &lt;==&gt; a = a // c%= # 取模赋值  a %= c &lt;==&gt; a = a % c**= #幂赋值 a **= c &lt;==&gt; a = a ** c</code></pre><p>3.break和continue</p><pre><code>break - 退出循环，不再执行后续代码continue - 退出当次循环，    继续执行下一次循环    注意计数变量的变化，防止死循环</code></pre><p>4.循环嵌套</p><pre><code>如果不希望末尾增加换行，可以在 print 函数输出内容的后面加上 end=&quot;&quot;其中&quot;&quot;中间可以指定 print 函数输出内容之后继续显示的内容eg:    print(&quot;hello&quot;,end=&quot;&quot;)eg2:    # 实例3    &quot;&quot;&quot;    *    **    ***    ****    *****    &quot;&quot;&quot;    row = 1    while row &lt;= 5:        col = 1        while col &lt;= row:            if row == col:                print(&quot;*&quot;)            else:                print(&quot;*&quot; , end=&quot;&quot;)            col += 1        row += 1    eg3:九九表        # 实例4 - 九九表        &quot;&quot;&quot;        1*1=1        2*1=2   2*2=4        3*1=3   3*2=6   3*3=9        4*1=4   4*2=8   4*3=12  4*4=16        5*1=5   5*2=10  5*3=15  5*4=20  5*5=25        6*1=6   ...        7*1=7   ...        8*1=8   ...        9*1=9   ...        &quot;&quot;&quot;        row = 1        while row &lt;= 9:            col = 1            while col &lt;= row:                if col == row:                        print(&quot;%d * %d = %d&quot; % (col,row,(col * row)))                   &lt;!--                     print(&quot;%d&quot; % row, end=&quot;*&quot;)                    print(&quot;%d&quot; % col, end=&quot;=&quot;)                    print(&quot;%d&quot; % (row * col))                    --&gt;                else:                      print(&quot;%d * %d = %d&quot; % (col, row, (col * row)),end=&quot;    &quot;)                    &lt;!--                    print(&quot;%d&quot; % row , end=&quot;*&quot;)                    print(&quot;%d&quot; % col , end=&quot;=&quot;)                    print(&quot;%d&quot; % (row * col), end=&quot;  &quot;)                    --&gt;                col += 1            row +=1</code></pre><p>5.其他<br><br>多个字符串的输出</p><pre><code>eg:    row = 1    col = 2    print(&quot;%d * %d&quot; % (col, row))    print(&quot;%d * %d = %d&quot; % (col, row, (col * row)),end=&quot;    &quot;)</code></pre><p>转义字符 </p><pre><code>\t  横向制表符 协助输出文本子啊垂直方向保持对齐    print(&quot;%d * %d = %d&quot; % (col, row, (col * row)),end=&quot;\t&quot;)\n  换行符     print(&quot;hello \n Python&quot;)\&quot; 可以在控制台输出 “ \&apos; \r 回车</code></pre><p>参考资料:<br><br>1.<a href="">黑马视频</a><br><br>2.<a href="https://www.w3cschool.cn/python/" target="_blank" rel="noopener">W3C-Python</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;程序流程&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;顺序 - 从上而下，顺序执行
分支 - 根据条件判断，决定执行代码的分支
循环 - 让 特点代码重复 执行
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一、分支语句&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://tao1010.github.io/categories/Python/"/>
    
    
      <category term="python基础" scheme="http://tao1010.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>iOS模块-UIButton</title>
    <link href="http://tao1010.github.io/2018/06/28/iOS/iOS%E6%A8%A1%E5%9D%97/iOS%E6%A8%A1%E5%9D%97-UIButton/"/>
    <id>http://tao1010.github.io/2018/06/28/iOS/iOS模块/iOS模块-UIButton/</id>
    <published>2018-06-28T01:27:59.000Z</published>
    <updated>2018-07-05T15:06:18.641Z</updated>
    
    <content type="html"><![CDATA[<p>一、UIButton简介<br><br><img src="button2.png" alt="button2"></p><a id="more"></a><p>二、UIButton的图文<br><br><img src="button.png" alt="button"></p><p>1.解析<br></p><pre><code>UIEdgeInsets insets = {top, left, bottom, right};正数就是距相应的边的距离增加，负数就是距相应的距离减少button.imageView.image尺寸：    button.currentImage.size.height    button.currentImage.size.widthbutton.titleLabel文本的尺寸：    button.titleLabel.intrinsicContentSize.height    button.titleLabel.intrinsicContentSize.width//1.图左文右 - 默认UIButton *button1 = [buttonArray objectAtIndex:0];[button1 setImageEdgeInsets:UIEdgeInsetsMake(0,0,0,0)];[button1 setTitleEdgeInsets:UIEdgeInsetsMake(0,0,0,0)];//2.图文居中UIButton *button2 = [buttonArray objectAtIndex:1];[button2 setImageEdgeInsets:UIEdgeInsetsMake(0,0,0,-button2.titleLabel.intrinsicContentSize.width)];[button2 setTitleEdgeInsets:UIEdgeInsetsMake(0,-button2.currentImage.size.width,0,0)];//3.图右文左UIButton *button3 = [buttonArray objectAtIndex:2];[button3 setImageEdgeInsets:UIEdgeInsetsMake(0,0,0,-button3.titleLabel.intrinsicContentSize.width * 2)];[button3 setTitleEdgeInsets:UIEdgeInsetsMake(0,-button3.currentImage.size.width * 2,0,0)];//4.图上文下UIButton *button4 = [buttonArray objectAtIndex:3];[button4 setImageEdgeInsets:UIEdgeInsetsMake(-button4.titleLabel.intrinsicContentSize.height,0,0,-button4.titleLabel.intrinsicContentSize.width)];[button4 setTitleEdgeInsets:UIEdgeInsetsMake(0,-button4.currentImage.size.width,-button4.currentImage.size.height,0)];//5.图文显示其一UIButton *button5 = [buttonArray objectAtIndex:4]; //6.图下 文上UIButton *button6 = [buttonArray objectAtIndex:5];[button6 setImageEdgeInsets:UIEdgeInsetsMake(0,0,-button6.titleLabel.intrinsicContentSize.height,-button6.titleLabel.intrinsicContentSize.width)];[button6 setTitleEdgeInsets:UIEdgeInsetsMake(-button6.currentImage.size.height,-button6.currentImage.size.width,0,0)]; </code></pre><p>三、UIButton点击事件<br><br><img src="responder.png" alt="iOS上的响应者链"><br><br>1.阐述从点击屏幕上的UIButton后，到UIButton收到点击事件的过程</p><pre><code>runloop和响应链需要说的清楚。UIResponder、UIControl、UIView的关系。响应者链(responder chain)：    当一个事件发生时，如果first responder不处理，事件就会继续往下传递，被下个responder接收，如果下个responder也不处理，又会被下下个rsponder接收...直到一个responder处理了事件或者没有responder。这些responder按照传递次序连接起来的链条就构成了响应者链。    UIApplication 是一个响应者链的终点，它的nextResponder指向nil，整个响应者链结束。</code></pre><p>2.事件的传递顺序:</p><pre><code>产生触摸事件-&gt;UIApplication事件队列-&gt;[UIWindow hitTest:withEvent:]-&gt;返回更合适的view-&gt;[子控件 hitTest:withEvent:]-&gt;返回最合适的view事件的生命周期    1&gt;事件的产生        触摸发生后，系统将该事件 加入一个由 UIApplication 管理的事件队列(队列：FIFO,栈:FILO)中;        UIApplication 会从事件队列中取出最前面的事件，并将事件分发下去以便处理，通常先发送事件给应用程序的主窗口keyWindow;        主窗口会在视图层次结构中找到最合适的视图来处理触摸事件，找到合适的视图控件后，会调用视图控件的touches 方法来作具体的事件处理。    2&gt;事件的传递        *重点* 事件如何从父控件传递到子控件并寻找到最合适的view            1.主窗口接收到应用程序传递过来的事件后，判断(自己能否接受触摸事件;若能，继续判断触摸点是否在自己身上)            2.触摸点在自己身上，遍历子控件(从后往前)            3.在每个子控件上重复判断步骤(1.判断子控件能否接受事件，2.点在不在子控件上)            4.直到找到最合适的View(能接受事件，点在自己身上)        *难点* 寻找最合适的view的底层实现 hitTest:withEvent 底层实现        拦截事件的处理            hitTest：withEvent：方法                调用时间:只要事件一传递给一个控件，就会调用                作用:寻找并返回最合适的view(能够响应事件的view)                拦截处理:重写此方法，返回需要指定的view即可                返回nil时，就表示父控件是最合适的view        触摸事件的传递是从父控件 传递到子控件；        UIApplication --&gt;Window --&gt;寻找处理事件最合适的view    3&gt;事件的处理(找到最合适的view后)        5.调用touches 方法具体事件UIResponder - 响应者对象    UIApplication    UIViewController    UIViewUIResponder - 事件处理    触摸         touchesBegan             若2根手指同时触摸，调用一次，touches参数中有2个UITouch对象             若2根手指一前一后触摸，调用2次，每次调用touches参数只有一个UITouch对象         touchesMoved         touchesEnded         touchesCancelled    加速计事件 - 不遵循响应链        motionBegan        motionEnded        motionCancelled    远程控制事件 - 耳机        remoteControlReceivedUITouch作用    保存跟手指相关的信息,比如触摸位置、时间、阶段；    当手指移动时，系统会更新同一个UITouch对象，使之能够一直保存该手指在的触摸位置；    当手指离开屏幕时，系统会销毁响应的UITouch对象；</code></pre><p>3.事件响应</p><pre><code>响应者：    能处理事件的对象，即继承自UIResponder的对象。响应者链条：    由多个响应者对象连接起来的链条。作用:     很清楚的看见每个响应者之间的联系，并且可以让一个事件多个对象处理。响应者链的事件传递过程：    如果当前view是控制器的view，那么控制器就是上一个响应者，事件就传递给控制器；如果当前view不是控制器的view，那么父视图就是当前view的上一个响应者，事件就传递给它的父视图    在视图层次结构的最顶级视图，如果也不能处理收到的事件或消息，则其将事件或消息传递给window对象进行处理    如果window对象也不处理，则其将事件或消息传递给UIApplication对象    如果UIApplication也不能处理该事件或消息，则将其丢弃</code></pre><p>参考资料:<br><br>1.<a href="https://www.zybuluo.com/MicroCai/note/66142" target="_blank" rel="noopener">iOS Events 和 Responder</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、UIButton简介&lt;br&gt;&lt;br&gt;&lt;img src=&quot;button2.png&quot; alt=&quot;button2&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tao1010.github.io/categories/iOS/"/>
    
    
      <category term="iOS模块" scheme="http://tao1010.github.io/tags/iOS%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>Python-python基础-语法和变量</title>
    <link href="http://tao1010.github.io/2018/06/27/Python/Python%E5%9F%BA%E7%A1%80/Python-python%E5%9F%BA%E7%A1%80-%E8%AF%AD%E6%B3%95%E5%92%8C%E5%8F%98%E9%87%8F/"/>
    <id>http://tao1010.github.io/2018/06/27/Python/Python基础/Python-python基础-语法和变量/</id>
    <published>2018-06-27T08:40:25.000Z</published>
    <updated>2018-07-02T12:22:04.131Z</updated>
    
    <content type="html"><![CDATA[<p>一、算数运算符</p><a id="more"></a><pre><code>+ - * /  # 加减乘除//  # 取整除 eg 9 // 2 输出 4**  # 幂 eg： 次方、乘方 2 ** 3 = 8&quot;-&quot; * 20    #输出连续20个‘-’</code></pre><p>先乘除后加减<br><br>同级运算符 从左到右<br><br>二、程序执行原理<br><br>1.计算机核心硬件</p><pre><code>CPU    中央处理器，一块超大规模的集成电路    负责处理数据/计算内存    临时 存储数据 断点后数据消失    速度快    空间小 单价高硬盘    永久存储数据    速度慢    空间大 单价低</code></pre><p>2.程序执行原理</p><pre><code>程序 运行 之前 是保存在 硬盘 中当要运行一个程序时    操作系统会让 CPU 把程序复制到 内存 中    CPU 执行 内存 中的程序代码程序要执行，首先要被加载到 内存</code></pre><p>3.Python程序执行原理</p><pre><code>操作系统会让 CPU 把 Python解释器 程序复制到 内存 中Python解释器 根据语法规则， 从上而下 让 CPU 翻译 Python程序中的代码CPU 负责执行翻译完的程序代码确认解释器的位置which python查看python文件大小ls -lh /usr/bin/python查看具体文件大小ls -lh /usr/bin/python</code></pre><p>4.程序作用</p><pre><code>程序 用来 处理数据 的,变量 就是用来 存储数据 的</code></pre><p>三、变量<br><br>1.变量的定义</p><pre><code>每个变量在使用前必须赋值,变量赋值后才能被创建eg:    qq_number = &apos;x123456x&apos;    qq_password = &apos;123456&apos;    print(&apos;QQ号码: &apos; + qq_number)    print(&apos;QQ密码: &apos; + qq_password)可以用其他变量的运算值 定义一个变量eg:    price = 5.0    weight = 3    total = price * weight</code></pre><p>2.变量命名</p><pre><code>标志符就是变量名和函数名；    字母、数字、下划线；    不能以数字开头；    不能与关键字重名；关键字：Python内部已经使用的标志符；    import  #可以导入一个“工具包”    查看关键字：        import keyword #导入关键字工具包        print(keyword.kwlist)    # 输出关键字列表Python 中的标志符 是 区分大小写的变量名由多个单词组成时： - Python中推荐方法    每个单词都使用小写;    单词与单词间使用 下划线(_) 连接;    eg:first_name、last_name驼峰命名法：    小驼峰        firstName、lastName    大驼峰：        FirstName、LastName</code></pre><p>3.变量类型</p><pre><code>在Python中，定义变量时不需要指定变量类型在运行时，Python解释器，会根据赋值语句等号右侧的数据自动推导出变量中保存的数据的准确类型数字型    bool(True 或 False)    float    int # python2.x中整型包含int、long    complex(复数型 - 科学计算，平面场、波动、电感电容等)非数字型    字符串 - str、    列表、    元祖、    字典使用 type 函数 查看变量类型eg:    name = &quot;Jike&quot;  #str    age = 18          #int    gender = True  #bool    type(name)</code></pre><p>4.不同类型变量间的计算</p><pre><code>数值型变量可以直接计算    布尔型 参与数字运算 True - 1  | False - 0eg:    a = True    b = 10.5    c = b - a #  9.5    字符串变量间 用 + 拼接字符串eg:    firstName = &quot;dong&quot;    lastName = &quot;haha&quot;    name = firstName + lastName字符串变量 和 整数 用 * 拼接eg:    firstName = &quot;dong&quot;            name = firstName * 3 # 表示 将3个连续的firstName字符串 赋值给 name</code></pre><p>四、变量的输入输出<br><br>1.输入</p><pre><code>如果要获取用户在键盘上输入的信息，需要使用 input 函数；用户输入的任何内容python都认为是一个字符串；语法：变量 = input(&quot;提示信息&quot;)  eg:    input(&quot;请输入登录账号:&quot;)    name = input(&quot;请输入登录账号:&quot;) # 用变量 name 接收 键盘输入的内容</code></pre><p>2.变量类型转换</p><pre><code>int(x)         #将 x 转换为一个 整数float(x)     #将 x 转换为一个 浮点数str(x)         #将 x 转换为一个 字符串eg:    type(int(&quot;123&quot;))        #将字符串123 --&gt; 整数123</code></pre><p>3.eg:</p><pre><code>price = input(&quot;请输入 apple 单价 （元/斤）：&quot;)weight = input(&quot;请输入 apple 重量 (斤):&quot;)money = float(price) * float(weight)print(&quot;顾客支付金额 (元): &quot; + str(money))等价于price = float(input(&quot;请输入 apple 单价 （元/斤）: &quot;))weight = float(input(&quot;请输入 apple 重量 (斤): &quot;))print(&quot;顾客支付金额 (元): &quot; + str(price * weight))</code></pre><p>4.格式化输出</p><pre><code>%s #字符串%d #有符号十进制整数 %06d 表示输出的整数显示位数，不足的地方使用0补齐%f #输出 浮点数 %.02f表示小数点后显示2位%% #输出%格式：    print(&quot;格式化字符串&quot; % 变量1)    print(&quot;格式化字符串&quot; % (变量1,变量2,变量3...))eg:    print(&quot;顾客支付金额 (元): %s &quot; % str(price * weight))        print(&quot;顾客支付金额 (元): %.2f &quot; % (price * weight))    print(&quot;顾客支付金额 (元): %06d &quot; % int(price * weight))</code></pre><p>参考资料:<br><br>1.<a href="">黑马视频</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、算数运算符&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://tao1010.github.io/categories/Python/"/>
    
    
      <category term="python基础" scheme="http://tao1010.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
